{"version":3,"file":"calendar.d.ts","sources":["calendar.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, OnInit, TemplateRef } from '@angular/core';\nimport { CalendarService } from './calendar.service';\nexport interface IEvent {\n    allDay: boolean;\n    endTime: Date;\n    startTime: Date;\n    title: string;\n}\nexport interface IRange {\n    startTime: Date;\n    endTime: Date;\n}\nexport interface IView {\n}\nexport interface IDayView extends IView {\n    allDayEvents: IDisplayAllDayEvent[];\n    rows: IDayViewRow[];\n}\nexport interface IDayViewRow {\n    events: IDisplayEvent[];\n    time: Date;\n}\nexport interface IMonthView extends IView {\n    dates: IMonthViewRow[];\n    dayHeaders: string[];\n}\nexport interface IMonthViewRow {\n    current?: boolean;\n    date: Date;\n    events: IEvent[];\n    hasEvent?: boolean;\n    label: string;\n    secondary: boolean;\n    selected?: boolean;\n    disabled: boolean;\n}\nexport interface IWeekView extends IView {\n    dates: IWeekViewDateRow[];\n    rows: IWeekViewRow[][];\n}\nexport interface IWeekViewDateRow {\n    current?: boolean;\n    date: Date;\n    events: IDisplayEvent[];\n    hasEvent?: boolean;\n    selected?: boolean;\n    dayHeader: string;\n}\nexport interface IWeekViewRow {\n    events: IDisplayEvent[];\n    time: Date;\n}\nexport interface IDisplayEvent {\n    endIndex: number;\n    endOffset?: number;\n    event: IEvent;\n    startIndex: number;\n    startOffset?: number;\n    overlapNumber?: number;\n    position?: number;\n}\nexport interface IDisplayWeekViewHeader {\n    viewDate: IWeekViewDateRow;\n}\nexport interface IDisplayAllDayEvent {\n    event: IEvent;\n}\nexport interface ICalendarComponent {\n    currentViewIndex: number;\n    direction: number;\n    eventSource: IEvent[];\n    getRange: {\n        (date: Date): IRange;\n    };\n    getViewData: {\n        (date: Date): IView;\n    };\n    mode: CalendarMode;\n    range: IRange;\n    views: IView[];\n    onDataLoaded: {\n        (): void;\n    };\n    onRangeChanged: EventEmitter<IRange>;\n}\nexport interface ITimeSelected {\n    events: IEvent[];\n    selectedTime: Date;\n    disabled: boolean;\n}\nexport interface IMonthViewDisplayEventTemplateContext {\n    view: IView;\n    row: number;\n    col: number;\n}\nexport interface IMonthViewEventDetailTemplateContext {\n    selectedDate: ITimeSelected;\n    noEventsLabel: string;\n}\nexport interface IWeekViewAllDayEventSectionTemplateContext {\n    day: IWeekViewDateRow;\n    eventTemplate: TemplateRef<IDisplayAllDayEvent>;\n}\nexport interface IWeekViewNormalEventSectionTemplateContext {\n    tm: IWeekViewRow;\n    eventTemplate: TemplateRef<IDisplayEvent>;\n}\nexport interface IDayViewAllDayEventSectionTemplateContext {\n    alldayEvents: IDisplayAllDayEvent[];\n    eventTemplate: TemplateRef<IDisplayAllDayEvent>;\n}\nexport interface IDayViewNormalEventSectionTemplateContext {\n    tm: IDayViewRow;\n    eventTemplate: TemplateRef<IDisplayEvent>;\n}\nexport interface IDateFormatter {\n    formatMonthViewDay?: {\n        (date: Date): string;\n    };\n    formatMonthViewDayHeader?: {\n        (date: Date): string;\n    };\n    formatMonthViewTitle?: {\n        (date: Date): string;\n    };\n    formatWeekViewDayHeader?: {\n        (date: Date): string;\n    };\n    formatWeekViewTitle?: {\n        (date: Date): string;\n    };\n    formatWeekViewHourColumn?: {\n        (date: Date): string;\n    };\n    formatDayViewTitle?: {\n        (date: Date): string;\n    };\n    formatDayViewHourColumn?: {\n        (date: Date): string;\n    };\n}\nexport declare type CalendarMode = 'day' | 'month' | 'week';\nexport declare type QueryMode = 'local' | 'remote';\nexport declare enum Step {\n    QuarterHour = 15,\n    HalfHour = 30,\n    Hour = 60\n}\nexport declare class CalendarComponent implements OnInit {\n    private calendarService;\n    private appLocale;\n    get currentDate(): Date;\n    set currentDate(val: Date);\n    eventSource: IEvent[];\n    calendarMode: CalendarMode;\n    formatDay: string;\n    formatDayHeader: string;\n    formatDayTitle: string;\n    formatWeekTitle: string;\n    formatMonthTitle: string;\n    formatWeekViewDayHeader: string;\n    formatHourColumn: string;\n    showEventDetail: boolean;\n    startingDayMonth: number;\n    startingDayWeek: number;\n    allDayLabel: string;\n    noEventsLabel: string;\n    queryMode: QueryMode;\n    step: Step;\n    timeInterval: number;\n    autoSelect: boolean;\n    markDisabled: (date: Date) => boolean;\n    monthviewDisplayEventTemplate: TemplateRef<IMonthViewDisplayEventTemplateContext>;\n    monthviewInactiveDisplayEventTemplate: TemplateRef<IMonthViewDisplayEventTemplateContext>;\n    monthviewEventDetailTemplate: TemplateRef<IMonthViewEventDetailTemplateContext>;\n    weekviewHeaderTemplate: TemplateRef<IDisplayWeekViewHeader>;\n    weekviewAllDayEventTemplate: TemplateRef<IDisplayAllDayEvent>;\n    weekviewNormalEventTemplate: TemplateRef<IDisplayEvent>;\n    dayviewAllDayEventTemplate: TemplateRef<IDisplayAllDayEvent>;\n    dayviewNormalEventTemplate: TemplateRef<IDisplayEvent>;\n    weekviewAllDayEventSectionTemplate: TemplateRef<IWeekViewAllDayEventSectionTemplateContext>;\n    weekviewNormalEventSectionTemplate: TemplateRef<IWeekViewNormalEventSectionTemplateContext>;\n    dayviewAllDayEventSectionTemplate: TemplateRef<IDayViewAllDayEventSectionTemplateContext>;\n    dayviewNormalEventSectionTemplate: TemplateRef<IDayViewNormalEventSectionTemplateContext>;\n    weekviewInactiveAllDayEventSectionTemplate: TemplateRef<IWeekViewAllDayEventSectionTemplateContext>;\n    weekviewInactiveNormalEventSectionTemplate: TemplateRef<IWeekViewNormalEventSectionTemplateContext>;\n    dayviewInactiveAllDayEventSectionTemplate: TemplateRef<IDayViewAllDayEventSectionTemplateContext>;\n    dayviewInactiveNormalEventSectionTemplate: TemplateRef<IDayViewNormalEventSectionTemplateContext>;\n    dateFormatter: IDateFormatter;\n    dir: string;\n    scrollToHour: number;\n    preserveScrollPosition: boolean;\n    lockSwipeToPrev: boolean;\n    lockSwipes: boolean;\n    locale: string;\n    startHour: number;\n    endHour: number;\n    sliderOptions: any;\n    onCurrentDateChanged: EventEmitter<Date>;\n    onRangeChanged: EventEmitter<IRange>;\n    onEventSelected: EventEmitter<IEvent>;\n    onTimeSelected: EventEmitter<ITimeSelected>;\n    onTitleChanged: EventEmitter<string>;\n    private _currentDate;\n    hourParts: number;\n    hourSegments: number;\n    private currentDateChangedFromChildrenSubscription;\n    constructor(calendarService: CalendarService, appLocale: string);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    rangeChanged(range: IRange): void;\n    eventSelected(event: IEvent): void;\n    timeSelected(timeSelected: ITimeSelected): void;\n    titleChanged(title: string): void;\n    loadEvents(): void;\n    slideNext(): void;\n    slidePrev(): void;\n    update(): void;\n}\n"]}