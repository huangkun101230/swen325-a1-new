{"version":3,"file":"weekview.d.ts","sources":["weekview.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { IonSlides } from '@ionic/angular';\nimport { OnInit, OnChanges, EventEmitter, SimpleChanges, TemplateRef, ElementRef, OnDestroy, AfterViewInit } from '@angular/core';\nimport { ICalendarComponent, IDisplayEvent, IEvent, ITimeSelected, IRange, IWeekView, IWeekViewRow, IWeekViewDateRow, CalendarMode, IDateFormatter, IDisplayWeekViewHeader } from './calendar';\nimport { CalendarService } from './calendar.service';\nimport { IDisplayAllDayEvent, IWeekViewAllDayEventSectionTemplateContext, IWeekViewNormalEventSectionTemplateContext } from './calendar';\nexport declare class WeekViewComponent implements ICalendarComponent, OnInit, OnChanges, OnDestroy, AfterViewInit {\n    private calendarService;\n    private elm;\n    constructor(calendarService: CalendarService, elm: ElementRef);\n    slider: IonSlides;\n    class: boolean;\n    weekviewHeaderTemplate: TemplateRef<IDisplayWeekViewHeader>;\n    weekviewAllDayEventTemplate: TemplateRef<IDisplayAllDayEvent>;\n    weekviewNormalEventTemplate: TemplateRef<IDisplayEvent>;\n    weekviewAllDayEventSectionTemplate: TemplateRef<IWeekViewAllDayEventSectionTemplateContext>;\n    weekviewNormalEventSectionTemplate: TemplateRef<IWeekViewNormalEventSectionTemplateContext>;\n    weekviewInactiveAllDayEventSectionTemplate: TemplateRef<IWeekViewAllDayEventSectionTemplateContext>;\n    weekviewInactiveNormalEventSectionTemplate: TemplateRef<IWeekViewNormalEventSectionTemplateContext>;\n    formatWeekTitle: string;\n    formatWeekViewDayHeader: string;\n    formatHourColumn: string;\n    startingDayWeek: number;\n    allDayLabel: string;\n    hourParts: number;\n    eventSource: IEvent[];\n    autoSelect: boolean;\n    markDisabled: (date: Date) => boolean;\n    locale: string;\n    dateFormatter: IDateFormatter;\n    dir: string;\n    scrollToHour: number;\n    preserveScrollPosition: boolean;\n    lockSwipeToPrev: boolean;\n    lockSwipes: boolean;\n    startHour: number;\n    endHour: number;\n    sliderOptions: any;\n    hourSegments: number;\n    onRangeChanged: EventEmitter<IRange>;\n    onEventSelected: EventEmitter<IEvent>;\n    onTimeSelected: EventEmitter<ITimeSelected>;\n    onTitleChanged: EventEmitter<string>;\n    views: IWeekView[];\n    currentViewIndex: number;\n    range: IRange;\n    direction: number;\n    mode: CalendarMode;\n    private inited;\n    private callbackOnInit;\n    private currentDateChangedFromParentSubscription;\n    private eventSourceChangedSubscription;\n    private slideChangedSubscription;\n    private slideUpdatedSubscription;\n    hourColumnLabels: string[];\n    initScrollPosition: number;\n    private formatDayHeader;\n    private formatTitle;\n    private formatHourColumnLabel;\n    private hourRange;\n    static createDateObjects(startTime: Date, startHour: number, endHour: number, timeInterval: number): IWeekViewRow[][];\n    static getDates(startTime: Date, n: number): IWeekViewDateRow[];\n    private static compareEventByStartOffset;\n    private static calculateWidth;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    onSlideChanged(): void;\n    move(direction: number): void;\n    private getHourColumnLabels;\n    getViewData(startTime: Date): IWeekView;\n    getRange(currentDate: Date): IRange;\n    onDataLoaded(): void;\n    refreshView(): void;\n    getTitle(): string;\n    getHighlightClass(date: IWeekViewDateRow): string;\n    select(selectedTime: Date, events: IDisplayEvent[]): void;\n    placeEvents(orderedEvents: IDisplayEvent[]): void;\n    placeAllDayEvents(orderedEvents: IDisplayEvent[]): void;\n    overlap(event1: IDisplayEvent, event2: IDisplayEvent): boolean;\n    calculatePosition(events: IDisplayEvent[]): void;\n    updateCurrentView(currentViewStartDate: Date, view: IWeekView): void;\n    daySelected(viewDate: IWeekViewDateRow): void;\n    setScrollPosition(scrollPosition: number): void;\n}\n"]}