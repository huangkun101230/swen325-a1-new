{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://ionic2-calendar/calendar.ts","ng://ionic2-calendar/calendar.service.ts","ng://ionic2-calendar/monthview.ts","ng://ionic2-calendar/weekview.ts","ng://ionic2-calendar/dayview.ts","ng://ionic2-calendar/init-position-scroll.ts","ng://ionic2-calendar/calendar.module.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Step","CalendarService","this","currentDateChangedFromParent","Subject","currentDateChangedFromChildren","eventSourceChanged","slideChanged","slideUpdated","currentDateChangedFromParent$","asObservable","currentDateChangedFromChildren$","eventSourceChanged$","slideChanged$","slideUpdated$","prototype","setCurrentDate","val","fromParent","_currentDate","Date","next","rangeChanged","component","queryMode","eventSource","onDataLoaded","rangeStart","range","startTime","getTime","rangeEnd","endTime","setHours","getHours","setTime","onRangeChanged","emit","getStep","mode","years","months","days","getAdjacentCalendarDate","direction","calculateCalendarDate","currentDate","step","year","getFullYear","month","getMonth","date","getDate","firstDayInNextMonth","getAdjacentViewStartTime","adjacentCalendarDate","getRange","populateAdjacentViews","currentViewStartDate","currentViewData","toUpdateViewIndex","currentViewIndex","views","getViewData","push","loadEvents","slide","update","Injectable","MonthViewComponent","calendarService","autoSelect","dir","EventEmitter","onEventSelected","onTimeSelected","onTitleChanged","moveOnSelected","inited","callbackOnInit","getDates","startDate","n","dates","Array","current","setDate","ngOnInit","_this","sliderOptions","loop","dateFormatter","formatMonthViewDay","formatDayLabel","dayLabelDatePipe_1","DatePipe","transform","formatDay","formatMonthViewDayHeader","formatDayHeaderLabel","datePipe_1","locale","formatDayHeader","formatMonthViewTitle","formatTitle","datePipe_2","formatMonthTitle","lockSwipeToPrev","slider","lockSwipes","refreshView","currentDateChangedFromParentSubscription","subscribe","eventSourceChangedSubscription","slideChangedSubscription","slideNext","slidePrev","slideUpdatedSubscription","ngOnDestroy","unsubscribe","ngOnChanges","changes","eventSourceChange","currentValue","ngAfterViewInit","title","getTitle","onSlideChanged","getActiveIndex","then","currentSlideIndex","isNaN","slideTo","move","adjacentDate","createDateObject","disabled","markDisabled","events","label","secondary","MonthViewComponent_1","dateObject","dayHeaders","getHighlightClass","className","hasEvent","selected","firstDayOfMonth","difference","startingDayMonth","getDay","numDisplayedFromPreviousMonth","endDate","len","utcStartTime","UTC","utcEndTime","event_1","eventStartTime","eventEndTime","eventUTCStartTime","eventUTCEndTime","allDay","timeDifferenceStart","timeDifferenceEnd","index","Math","floor","endIndex","ceil","eventSet","sort","compareEvent","findSelected","selectedDate","selectedTime","updateCurrentView","headerDate","event1","event2","select","viewDate","currentCalendarDate","currentMonth","currentYear","selectedMonth","selectedYear","selectedDayDifference","round","slideView","view","today","currentDayDifference","eventSelected","event","ViewChild","static","Input","Output","Component","selector","template","WeekViewComponent","elm","class","scrollToHour","createDateObjects","startHour","endHour","timeInterval","hourStep","minStep","times","hour","interval","row","day","time","dayHeader","compareEventByStartOffset","eventA","eventB","startOffset","calculateWidth","orderedEvents","size","hourParts","totalSize","cells","position","i_1","calculated","i_2","startIndex","endOffset","event_2","overlapNumber","eventQueue","shift","eventCountInCell","j","currentEventInCell","hourRange","hourSegments","formatWeekViewDayHeader","formatWeekViewTitle","formatWeekTitle","formatWeekViewHourColumn","formatHourColumnLabel","datePipe_3","formatHourColumn","hourColumnLabels","getHourColumnLabels","hourColumns_1","nativeElement","querySelector","querySelectorAll","me_1","setTimeout","initScrollPosition","offsetTop","adjacent","length_1","rows","WeekViewComponent_1","startingDayWeek","rangeStartRowIndex","rangeEndRowIndex","allRows","allDayEventInRange","normalEventInRange","event_3","allDayStartIndex","displayAllDayEvent","getMinutes","startRowIndex","dayIndex","endOfDay","endRowIndex","displayEvent","concat","placeEvents","orderedAllDayEvents","placeAllDayEvents","map","e","firstDayOfWeek","calculatePosition","overlap","earlyEvent","lateEvent","isForbidden","maxColumn","col","daySelected","setScrollPosition","scrollPosition","ElementRef","HostBinding","encapsulation","ViewEncapsulation","None","DayViewComponent","formatDayViewTitle","formatDayTitle","formatDayViewHourColumn","DayViewComponent_1","allDayEvents","startingDate","CalendarComponent","appLocale","calendarMode","showEventDetail","allDayLabel","noEventsLabel","Hour","preserveScrollPosition","onCurrentDateChanged","paramIndex","decorator","toString","parseInt","currentDateChangedFromChildrenSubscription","timeSelected","titleChanged","Inject","args","LOCALE_ID","providers","initPositionScrollComponent","el","onScroll","listenerAttached","element","initPosition","undefined","scrollContent","scrollTop","emitEvent","onScroll_1","handler","addEventListener","removeEventListener","NgCalendarModule","NgModule","declarations","imports","IonicModule","CommonModule","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Component, EventEmitter, Input, OnInit, Output, TemplateRef, Inject, LOCALE_ID } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { CalendarService } from './calendar.service';\n\nexport interface IEvent {\n    allDay: boolean;\n    endTime: Date;\n    startTime: Date;\n    title: string;\n}\n\nexport interface IRange {\n    startTime: Date;\n    endTime: Date;\n}\n\nexport interface IView {\n}\n\nexport interface IDayView extends IView {\n    allDayEvents: IDisplayAllDayEvent[];\n    rows: IDayViewRow[];\n}\n\nexport interface IDayViewRow {\n    events: IDisplayEvent[];\n    time: Date;\n}\n\nexport interface IMonthView extends IView {\n    dates: IMonthViewRow[];\n    dayHeaders: string[];\n}\n\nexport interface IMonthViewRow {\n    current?: boolean;\n    date: Date;\n    events: IEvent[];\n    hasEvent?: boolean;\n    label: string;\n    secondary: boolean;\n    selected?: boolean;\n    disabled: boolean;\n}\n\nexport interface IWeekView extends IView {\n    dates: IWeekViewDateRow[];\n    rows: IWeekViewRow[][];\n}\n\nexport interface IWeekViewDateRow {\n    current?: boolean;\n    date: Date;\n    events: IDisplayEvent[];\n    hasEvent?: boolean;\n    selected?: boolean;\n    dayHeader: string;\n}\n\nexport interface IWeekViewRow {\n    events: IDisplayEvent[];\n    time: Date;\n}\n\nexport interface IDisplayEvent {\n    endIndex: number;\n    endOffset?: number;\n    event: IEvent;\n    startIndex: number;\n    startOffset?: number;\n    overlapNumber?: number;\n    position?: number;\n}\n\nexport interface IDisplayWeekViewHeader {\n    viewDate: IWeekViewDateRow;\n}\n\nexport interface IDisplayAllDayEvent {\n    event: IEvent;\n}\n\nexport interface ICalendarComponent {\n    currentViewIndex: number;\n    direction: number;\n    eventSource: IEvent[];\n    getRange: { (date:Date): IRange; };\n    getViewData: { (date:Date): IView };\n    mode: CalendarMode;\n    range: IRange;\n    views: IView[];\n    onDataLoaded: { (): void };\n    onRangeChanged: EventEmitter<IRange>;\n}\n\nexport interface ITimeSelected {\n    events: IEvent[];\n    selectedTime: Date;\n    disabled: boolean;\n}\n\nexport interface IMonthViewDisplayEventTemplateContext {\n    view: IView;\n    row: number;\n    col: number;\n}\n\nexport interface IMonthViewEventDetailTemplateContext {\n    selectedDate: ITimeSelected;\n    noEventsLabel: string;\n}\n\nexport interface IWeekViewAllDayEventSectionTemplateContext {\n    day: IWeekViewDateRow,\n    eventTemplate: TemplateRef<IDisplayAllDayEvent>\n}\n\nexport interface IWeekViewNormalEventSectionTemplateContext {\n    tm: IWeekViewRow,\n    eventTemplate: TemplateRef<IDisplayEvent>\n}\n\nexport interface IDayViewAllDayEventSectionTemplateContext {\n    alldayEvents: IDisplayAllDayEvent[],\n    eventTemplate: TemplateRef<IDisplayAllDayEvent>\n}\n\nexport interface IDayViewNormalEventSectionTemplateContext {\n    tm: IDayViewRow,\n    eventTemplate: TemplateRef<IDisplayEvent>\n}\n\nexport interface IDateFormatter {\n    formatMonthViewDay?: { (date:Date): string; };\n    formatMonthViewDayHeader?: { (date:Date): string; };\n    formatMonthViewTitle?: { (date:Date): string; };\n    formatWeekViewDayHeader?: { (date:Date): string; };\n    formatWeekViewTitle?: { (date:Date): string; };\n    formatWeekViewHourColumn?: { (date:Date): string; };\n    formatDayViewTitle?: { (date:Date): string; };\n    formatDayViewHourColumn?: { (date:Date): string; };\n}\n\nexport type CalendarMode = 'day' | 'month' | 'week';\n\nexport type QueryMode = 'local' | 'remote';\n\nexport enum Step {\n    QuarterHour = 15,\n    HalfHour = 30,\n    Hour = 60\n}\n\n@Component({\n    selector: 'calendar',\n    template: `\n        <ng-template #monthviewDefaultDisplayEventTemplate let-view=\"view\" let-row=\"row\" let-col=\"col\">\n            {{view.dates[row*7+col].label}}\n        </ng-template>\n        <ng-template #monthviewDefaultEventDetailTemplate let-showEventDetail=\"showEventDetail\" let-selectedDate=\"selectedDate\" let-noEventsLabel=\"noEventsLabel\">\n            <ion-list class=\"event-detail-container\" has-bouncing=\"false\" *ngIf=\"showEventDetail\" overflow-scroll=\"false\">\n                <ion-item *ngFor=\"let event of selectedDate?.events\" (click)=\"eventSelected(event)\">\n                        <span *ngIf=\"!event.allDay\" class=\"monthview-eventdetail-timecolumn\">{{event.startTime|date: 'HH:mm'}}\n                            -\n                            {{event.endTime|date: 'HH:mm'}}\n                        </span>\n                    <span *ngIf=\"event.allDay\" class=\"monthview-eventdetail-timecolumn\">{{allDayLabel}}</span>\n                    <span class=\"event-detail\">  |  {{event.title}}</span>\n                </ion-item>\n                <ion-item *ngIf=\"selectedDate?.events.length==0\">\n                    <div class=\"no-events-label\">{{noEventsLabel}}</div>\n                </ion-item>\n            </ion-list>\n        </ng-template>\n        <ng-template #defaultWeekviewHeaderTemplate let-viewDate=\"viewDate\">\n            {{ viewDate.dayHeader }}\n        </ng-template>\n        <ng-template #defaultAllDayEventTemplate let-displayEvent=\"displayEvent\">\n            <div class=\"calendar-event-inner\">{{displayEvent.event.title}}</div>\n        </ng-template>\n        <ng-template #defaultNormalEventTemplate let-displayEvent=\"displayEvent\">\n            <div class=\"calendar-event-inner\">{{displayEvent.event.title}}</div>\n        </ng-template>\n        <ng-template #defaultWeekViewAllDayEventSectionTemplate let-day=\"day\" let-eventTemplate=\"eventTemplate\">\n            <div [ngClass]=\"{'calendar-event-wrap': day.events}\" *ngIf=\"day.events\"\n                 [ngStyle]=\"{height: 25*day.events.length+'px'}\">\n                <div *ngFor=\"let displayEvent of day.events\" class=\"calendar-event\" tappable\n                     (click)=\"eventSelected(displayEvent.event)\"\n                     [ngStyle]=\"{top: 25*displayEvent.position+'px', width: 100*(displayEvent.endIndex-displayEvent.startIndex)+'%', height: '25px'}\">\n                    <ng-template [ngTemplateOutlet]=\"eventTemplate\"\n                                 [ngTemplateOutletContext]=\"{displayEvent:displayEvent}\">\n                    </ng-template>\n                </div>\n            </div>\n        </ng-template>\n        <ng-template #defaultDayViewAllDayEventSectionTemplate let-allDayEvents=\"allDayEvents\" let-eventTemplate=\"eventTemplate\">\n            <div *ngFor=\"let displayEvent of allDayEvents; let eventIndex=index\"\n                 class=\"calendar-event\" tappable\n                 (click)=\"eventSelected(displayEvent.event)\"\n                 [ngStyle]=\"{top: 25*eventIndex+'px',width: '100%',height:'25px'}\">\n                <ng-template [ngTemplateOutlet]=\"eventTemplate\"\n                             [ngTemplateOutletContext]=\"{displayEvent:displayEvent}\">\n                </ng-template>\n            </div>\n        </ng-template>\n        <ng-template #defaultNormalEventSectionTemplate let-tm=\"tm\" let-hourParts=\"hourParts\" let-eventTemplate=\"eventTemplate\">\n            <div [ngClass]=\"{'calendar-event-wrap': tm.events}\" *ngIf=\"tm.events\">\n                <div *ngFor=\"let displayEvent of tm.events\" class=\"calendar-event\" tappable\n                     (click)=\"eventSelected(displayEvent.event)\"\n                     [ngStyle]=\"{top: (37*displayEvent.startOffset/hourParts)+'px',left: 100/displayEvent.overlapNumber*displayEvent.position+'%', width: 100/displayEvent.overlapNumber+'%', height: 37*(displayEvent.endIndex -displayEvent.startIndex - (displayEvent.endOffset + displayEvent.startOffset)/hourParts)+'px'}\">\n                    <ng-template [ngTemplateOutlet]=\"eventTemplate\"\n                                 [ngTemplateOutletContext]=\"{displayEvent:displayEvent}\">\n                    </ng-template>\n                </div>\n            </div>\n        </ng-template>\n        <ng-template #defaultInactiveAllDayEventSectionTemplate>\n        </ng-template>\n        <ng-template #defaultInactiveNormalEventSectionTemplate>\n        </ng-template>\n\n        <div [ngSwitch]=\"calendarMode\" class=\"{{calendarMode}}view-container\">\n            <monthview *ngSwitchCase=\"'month'\"\n                [formatDay]=\"formatDay\"\n                [formatDayHeader]=\"formatDayHeader\"\n                [formatMonthTitle]=\"formatMonthTitle\"\n                [startingDayMonth]=\"startingDayMonth\"\n                [showEventDetail]=\"showEventDetail\"\n                [noEventsLabel]=\"noEventsLabel\"\n                [autoSelect]=\"autoSelect\"\n                [eventSource]=\"eventSource\"\n                [markDisabled]=\"markDisabled\"\n                [monthviewDisplayEventTemplate]=\"monthviewDisplayEventTemplate||monthviewDefaultDisplayEventTemplate\"\n                [monthviewInactiveDisplayEventTemplate]=\"monthviewInactiveDisplayEventTemplate||monthviewDefaultDisplayEventTemplate\"\n                [monthviewEventDetailTemplate]=\"monthviewEventDetailTemplate||monthviewDefaultEventDetailTemplate\"\n                [locale]=\"locale\"\n                [dateFormatter]=\"dateFormatter\"\n                [dir]=\"dir\"\n                [lockSwipeToPrev]=\"lockSwipeToPrev\"\n                [lockSwipes]=\"lockSwipes\"\n                [sliderOptions]=\"sliderOptions\"\n                (onRangeChanged)=\"rangeChanged($event)\"\n                (onEventSelected)=\"eventSelected($event)\"\n                (onTimeSelected)=\"timeSelected($event)\"\n                (onTitleChanged)=\"titleChanged($event)\">\n            </monthview>\n            <weekview *ngSwitchCase=\"'week'\"\n                [formatWeekTitle]=\"formatWeekTitle\"\n                [formatWeekViewDayHeader]=\"formatWeekViewDayHeader\"\n                [formatHourColumn]=\"formatHourColumn\"\n                [startingDayWeek]=\"startingDayWeek\"\n                [allDayLabel]=\"allDayLabel\"\n                [hourParts]=\"hourParts\"\n                [autoSelect]=\"autoSelect\"\n                [hourSegments]=\"hourSegments\"\n                [eventSource]=\"eventSource\"\n                [markDisabled]=\"markDisabled\"\n                [weekviewHeaderTemplate]=\"weekviewHeaderTemplate||defaultWeekviewHeaderTemplate\"\n                [weekviewAllDayEventTemplate]=\"weekviewAllDayEventTemplate||defaultAllDayEventTemplate\"\n                [weekviewNormalEventTemplate]=\"weekviewNormalEventTemplate||defaultNormalEventTemplate\"\n                [weekviewAllDayEventSectionTemplate]=\"weekviewAllDayEventSectionTemplate||defaultWeekViewAllDayEventSectionTemplate\"\n                [weekviewNormalEventSectionTemplate]=\"weekviewNormalEventSectionTemplate||defaultNormalEventSectionTemplate\"\n                [weekviewInactiveAllDayEventSectionTemplate]=\"weekviewInactiveAllDayEventSectionTemplate||defaultInactiveAllDayEventSectionTemplate\"\n                [weekviewInactiveNormalEventSectionTemplate]=\"weekviewInactiveNormalEventSectionTemplate||defaultInactiveNormalEventSectionTemplate\"\n                [locale]=\"locale\"\n                [dateFormatter]=\"dateFormatter\"\n                [dir]=\"dir\"\n                [scrollToHour]=\"scrollToHour\"\n                [preserveScrollPosition]=\"preserveScrollPosition\"\n                [lockSwipeToPrev]=\"lockSwipeToPrev\"\n                [lockSwipes]=\"lockSwipes\"\n                [startHour]=\"startHour\"\n                [endHour]=\"endHour\"\n                [sliderOptions]=\"sliderOptions\"\n                (onRangeChanged)=\"rangeChanged($event)\"\n                (onEventSelected)=\"eventSelected($event)\"\n                (onTimeSelected)=\"timeSelected($event)\"\n                (onTitleChanged)=\"titleChanged($event)\">\n            </weekview>\n            <dayview *ngSwitchCase=\"'day'\"\n                [formatDayTitle]=\"formatDayTitle\"\n                [formatHourColumn]=\"formatHourColumn\"\n                [allDayLabel]=\"allDayLabel\"\n                [hourParts]=\"hourParts\"\n                [hourSegments]=\"hourSegments\"\n                [eventSource]=\"eventSource\"\n                [markDisabled]=\"markDisabled\"\n                [dayviewAllDayEventTemplate]=\"dayviewAllDayEventTemplate||defaultAllDayEventTemplate\"\n                [dayviewNormalEventTemplate]=\"dayviewNormalEventTemplate||defaultNormalEventTemplate\"\n                [dayviewAllDayEventSectionTemplate]=\"dayviewAllDayEventSectionTemplate||defaultDayViewAllDayEventSectionTemplate\"\n                [dayviewNormalEventSectionTemplate]=\"dayviewNormalEventSectionTemplate||defaultNormalEventSectionTemplate\"\n                [dayviewInactiveAllDayEventSectionTemplate]=\"dayviewInactiveAllDayEventSectionTemplate||defaultInactiveAllDayEventSectionTemplate\"\n                [dayviewInactiveNormalEventSectionTemplate]=\"dayviewInactiveNormalEventSectionTemplate||defaultInactiveNormalEventSectionTemplate\"\n                [locale]=\"locale\"\n                [dateFormatter]=\"dateFormatter\"\n                [dir]=\"dir\"\n                [scrollToHour]=\"scrollToHour\"\n                [preserveScrollPosition]=\"preserveScrollPosition\"\n                [lockSwipeToPrev]=\"lockSwipeToPrev\"\n                [lockSwipes]=\"lockSwipes\"\n                [startHour]=\"startHour\"\n                [endHour]=\"endHour\"\n                [sliderOptions]=\"sliderOptions\"\n                (onRangeChanged)=\"rangeChanged($event)\"\n                (onEventSelected)=\"eventSelected($event)\"\n                (onTimeSelected)=\"timeSelected($event)\"\n                (onTitleChanged)=\"titleChanged($event)\">\n            </dayview>\n        </div>\n    `,\n    styles: [`\n        :host > div { height: 100%; }\n\n        .event-detail-container {\n          border-top: 2px darkgrey solid;\n        }\n\n        .no-events-label {\n          font-weight: bold;\n          color: darkgrey;\n          text-align: center;\n        }\n\n        .event-detail {\n          cursor: pointer;\n          white-space: nowrap;\n          text-overflow: ellipsis;\n        }\n\n        .monthview-eventdetail-timecolumn {\n          width: 110px;\n          overflow: hidden;\n        }\n\n        .calendar-event-inner {\n          overflow: hidden;\n          background-color: #3a87ad;\n          color: white;\n          height: 100%;\n          width: 100%;\n          padding: 2px;\n          line-height: 15px;\n          text-align: initial;\n        }\n\n        @media (max-width: 750px) {\n          .calendar-event-inner {\n            font-size: 12px;\n          }\n        }\n    `],\n    providers: [CalendarService]\n})\nexport class CalendarComponent implements OnInit {\n    @Input()\n    get currentDate():Date {\n        return this._currentDate;\n    }\n\n    set currentDate(val:Date) {\n        if (!val) {\n            val = new Date();\n        }\n\n        this._currentDate = val;\n        this.calendarService.setCurrentDate(val, true);\n        this.onCurrentDateChanged.emit(this._currentDate);\n    }\n\n    @Input() eventSource:IEvent[] = [];\n    @Input() calendarMode:CalendarMode = 'month';\n    @Input() formatDay:string = 'd';\n    @Input() formatDayHeader:string = 'EEE';\n    @Input() formatDayTitle:string = 'MMMM dd, yyyy';\n    @Input() formatWeekTitle:string = 'MMMM yyyy, \\'Week\\' w';\n    @Input() formatMonthTitle:string = 'MMMM yyyy';\n    @Input() formatWeekViewDayHeader:string = 'EEE d';\n    @Input() formatHourColumn:string = 'ha';\n    @Input() showEventDetail:boolean = true;\n    @Input() startingDayMonth:number = 0;\n    @Input() startingDayWeek:number = 0;\n    @Input() allDayLabel:string = 'all day';\n    @Input() noEventsLabel:string = 'No Events';\n    @Input() queryMode:QueryMode = 'local';\n    @Input() step:Step = Step.Hour;\n    @Input() timeInterval:number = 60;\n    @Input() autoSelect:boolean = true;\n    @Input() markDisabled:(date:Date) => boolean;\n    @Input() monthviewDisplayEventTemplate:TemplateRef<IMonthViewDisplayEventTemplateContext>;\n    @Input() monthviewInactiveDisplayEventTemplate:TemplateRef<IMonthViewDisplayEventTemplateContext>;\n    @Input() monthviewEventDetailTemplate:TemplateRef<IMonthViewEventDetailTemplateContext>;\n    @Input() weekviewHeaderTemplate:TemplateRef<IDisplayWeekViewHeader>;\n    @Input() weekviewAllDayEventTemplate:TemplateRef<IDisplayAllDayEvent>;\n    @Input() weekviewNormalEventTemplate:TemplateRef<IDisplayEvent>;\n    @Input() dayviewAllDayEventTemplate:TemplateRef<IDisplayAllDayEvent>;\n    @Input() dayviewNormalEventTemplate:TemplateRef<IDisplayEvent>;\n    @Input() weekviewAllDayEventSectionTemplate:TemplateRef<IWeekViewAllDayEventSectionTemplateContext>;\n    @Input() weekviewNormalEventSectionTemplate:TemplateRef<IWeekViewNormalEventSectionTemplateContext>;\n    @Input() dayviewAllDayEventSectionTemplate:TemplateRef<IDayViewAllDayEventSectionTemplateContext>;\n    @Input() dayviewNormalEventSectionTemplate:TemplateRef<IDayViewNormalEventSectionTemplateContext>;\n    @Input() weekviewInactiveAllDayEventSectionTemplate:TemplateRef<IWeekViewAllDayEventSectionTemplateContext>;\n    @Input() weekviewInactiveNormalEventSectionTemplate:TemplateRef<IWeekViewNormalEventSectionTemplateContext>;\n    @Input() dayviewInactiveAllDayEventSectionTemplate:TemplateRef<IDayViewAllDayEventSectionTemplateContext>;\n    @Input() dayviewInactiveNormalEventSectionTemplate:TemplateRef<IDayViewNormalEventSectionTemplateContext>;\n    @Input() dateFormatter:IDateFormatter;\n    @Input() dir:string = \"\";\n    @Input() scrollToHour:number = 0;\n    @Input() preserveScrollPosition:boolean = false;\n    @Input() lockSwipeToPrev:boolean = false;\n    @Input() lockSwipes:boolean = false;\n    @Input() locale:string = \"\";\n    @Input() startHour:number = 0;\n    @Input() endHour:number = 24;\n    @Input() sliderOptions:any;\n\n    @Output() onCurrentDateChanged = new EventEmitter<Date>();\n    @Output() onRangeChanged = new EventEmitter<IRange>();\n    @Output() onEventSelected = new EventEmitter<IEvent>();\n    @Output() onTimeSelected = new EventEmitter<ITimeSelected>();\n    @Output() onTitleChanged = new EventEmitter<string>();\n\n    private _currentDate:Date;\n    public hourParts = 1;\n    public hourSegments = 1;\n    private currentDateChangedFromChildrenSubscription:Subscription;\n\n    constructor(private calendarService:CalendarService, @Inject(LOCALE_ID) private appLocale:string) {\n        this.locale = appLocale;\n    }\n\n    ngOnInit() {\n        if (this.autoSelect) {\n            if (this.autoSelect.toString() === 'false') {\n                this.autoSelect = false;\n            } else {\n                this.autoSelect = true;\n            }\n        }\n        this.hourSegments = 60 / this.timeInterval;\n        this.hourParts = 60 / this.step;\n        if(this.hourParts <= this.hourSegments) {\n            this.hourParts = 1;\n        } else {\n            this.hourParts = this.hourParts / this.hourSegments;\n        }\n        this.startHour = parseInt(this.startHour.toString());\n        this.endHour = parseInt(this.endHour.toString());\n        this.calendarService.queryMode = this.queryMode;\n\n        this.currentDateChangedFromChildrenSubscription = this.calendarService.currentDateChangedFromChildren$.subscribe(currentDate => {\n            this._currentDate = currentDate;\n            this.onCurrentDateChanged.emit(currentDate);\n        });\n    }\n\n    ngOnDestroy() {\n        if (this.currentDateChangedFromChildrenSubscription) {\n            this.currentDateChangedFromChildrenSubscription.unsubscribe();\n            this.currentDateChangedFromChildrenSubscription = null;\n        }\n    }\n\n    rangeChanged(range:IRange) {\n        this.onRangeChanged.emit(range);\n    }\n\n    eventSelected(event:IEvent) {\n        this.onEventSelected.emit(event);\n    }\n\n    timeSelected(timeSelected:ITimeSelected) {\n        this.onTimeSelected.emit(timeSelected);\n    }\n\n    titleChanged(title:string) {\n        this.onTitleChanged.emit(title);\n    }\n\n    loadEvents() {\n        this.calendarService.loadEvents();\n    }\n\n    slideNext() {\n        this.calendarService.slide(1);\n    }\n\n    slidePrev() {\n        this.calendarService.slide(-1);\n    }\n\n    update() {\n        this.calendarService.update();\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\nimport {ICalendarComponent, IView, CalendarMode, QueryMode} from './calendar';\n\n@Injectable()\nexport class CalendarService {\n    queryMode: QueryMode;\n    currentDateChangedFromParent$: Observable<Date>;\n    currentDateChangedFromChildren$: Observable<Date>;\n    eventSourceChanged$: Observable<void>;\n    slideChanged$: Observable<number>;\n    slideUpdated$: Observable<void>;\n\n    private _currentDate: Date;\n    private currentDateChangedFromParent = new Subject<Date>();\n    private currentDateChangedFromChildren = new Subject<Date>();\n    private eventSourceChanged = new Subject<void>();\n    private slideChanged = new Subject<number>();\n    private slideUpdated = new Subject<void>();\n\n    constructor() {\n        this.currentDateChangedFromParent$ = this.currentDateChangedFromParent.asObservable();\n        this.currentDateChangedFromChildren$ = this.currentDateChangedFromChildren.asObservable();\n        this.eventSourceChanged$ = this.eventSourceChanged.asObservable();\n        this.slideChanged$ = this.slideChanged.asObservable();\n        this.slideUpdated$ = this.slideUpdated.asObservable();\n    }\n\n    setCurrentDate(val: Date, fromParent: boolean = false) {\n        this._currentDate = new Date(val);\n        if (fromParent) {\n            this.currentDateChangedFromParent.next(val);\n        } else {\n            this.currentDateChangedFromChildren.next(val);\n        }\n    }\n\n    get currentDate(): Date {\n        return this._currentDate;\n    }\n\n    rangeChanged(component: ICalendarComponent) {\n        if (this.queryMode === 'local') {\n            if (component.eventSource && component.onDataLoaded) {\n                component.onDataLoaded();\n            }\n        } else if (this.queryMode === 'remote') {\n            let rangeStart = new Date(component.range.startTime.getTime()),\n                rangeEnd = new Date(component.range.endTime.getTime());\n\n            rangeStart.setHours(0);\n            if (rangeStart.getHours() === 23) {\n                rangeStart.setTime(rangeStart.getTime() + 3600000);\n            }\n\n            rangeEnd.setHours(0);\n            if (rangeEnd.getHours() === 23) {\n                rangeEnd.setTime(rangeEnd.getTime() + 3600000);\n            }\n            component.onRangeChanged.emit({\n                startTime: rangeStart,\n                endTime: rangeEnd\n            });\n        }\n    }\n\n    private getStep(mode: CalendarMode): { years: number; months: number; days: number; } {\n        switch (mode) {\n            case 'month':\n                return {\n                    years: 0,\n                    months: 1,\n                    days: 0\n                };\n            case 'week':\n                return {\n                    years: 0,\n                    months: 0,\n                    days: 7\n                };\n            case 'day':\n                return {\n                    years: 0,\n                    months: 0,\n                    days: 1\n                };\n        }\n    }\n\n    getAdjacentCalendarDate(mode: CalendarMode, direction: number): Date {\n        let calculateCalendarDate = this.currentDate;\n        const step = this.getStep(mode),\n            year = calculateCalendarDate.getFullYear() + direction * step.years,\n            month = calculateCalendarDate.getMonth() + direction * step.months,\n            date = calculateCalendarDate.getDate() + direction * step.days;\n\n        calculateCalendarDate = new Date(year, month, date, 12, 0, 0);\n\n        if (mode === 'month') {\n            const firstDayInNextMonth = new Date(year, month + 1, 1, 12, 0, 0);\n            if (firstDayInNextMonth.getTime() <= calculateCalendarDate.getTime()) {\n                calculateCalendarDate = new Date(firstDayInNextMonth.getTime() - 24 * 60 * 60 * 1000);\n            }\n        }\n        return calculateCalendarDate;\n    }\n\n    getAdjacentViewStartTime(component: ICalendarComponent, direction: number): Date {\n        let adjacentCalendarDate = this.getAdjacentCalendarDate(component.mode, direction);\n        return component.getRange(adjacentCalendarDate).startTime;\n    }\n\n    populateAdjacentViews(component: ICalendarComponent) {\n        let currentViewStartDate: Date,\n            currentViewData: IView[],\n            toUpdateViewIndex: number,\n            currentViewIndex = component.currentViewIndex;\n\n        if (component.direction === 1) {\n            currentViewStartDate = this.getAdjacentViewStartTime(component, 1);\n            toUpdateViewIndex = (currentViewIndex + 1) % 3;\n            component.views[toUpdateViewIndex] = component.getViewData(currentViewStartDate);\n        } else if (component.direction === -1) {\n            currentViewStartDate = this.getAdjacentViewStartTime(component, -1);\n            toUpdateViewIndex = (currentViewIndex + 2) % 3;\n            component.views[toUpdateViewIndex] = component.getViewData(currentViewStartDate);\n        } else {\n            if (!component.views) {\n                currentViewData = [];\n                currentViewStartDate = component.range.startTime;\n                currentViewData.push(component.getViewData(currentViewStartDate));\n                currentViewStartDate = this.getAdjacentViewStartTime(component, 1);\n                currentViewData.push(component.getViewData(currentViewStartDate));\n                currentViewStartDate = this.getAdjacentViewStartTime(component, -1);\n                currentViewData.push(component.getViewData(currentViewStartDate));\n                component.views = currentViewData;\n            } else {\n                currentViewStartDate = component.range.startTime;\n                component.views[currentViewIndex] = component.getViewData(currentViewStartDate);\n                currentViewStartDate = this.getAdjacentViewStartTime(component, -1);\n                toUpdateViewIndex = (currentViewIndex + 2) % 3;\n                component.views[toUpdateViewIndex] = component.getViewData(currentViewStartDate);\n                currentViewStartDate = this.getAdjacentViewStartTime(component, 1);\n                toUpdateViewIndex = (currentViewIndex + 1) % 3;\n                component.views[toUpdateViewIndex] = component.getViewData(currentViewStartDate);\n            }\n        }\n    }\n\n    loadEvents() {\n        this.eventSourceChanged.next();\n    }\n\n    slide(direction: number) {\n        this.slideChanged.next(direction);\n    }\n\n    update() {\n        this.slideUpdated.next();\n    }\n}\n","import {\n    Component,\n    OnInit,\n    OnChanges,\n    Input,\n    Output,\n    EventEmitter,\n    SimpleChanges,\n    ViewChild,\n    TemplateRef,\n    OnDestroy,\n    AfterViewInit\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {DatePipe} from '@angular/common';\nimport {IonSlides} from '@ionic/angular';\n\nimport {ICalendarComponent, IEvent, IMonthView, IMonthViewRow, ITimeSelected, IRange, CalendarMode, IDateFormatter} from './calendar';\nimport {CalendarService} from './calendar.service';\nimport {IMonthViewDisplayEventTemplateContext} from './calendar';\n\n@Component({\n    selector: 'monthview',\n    template: `\n        <div>\n            <ion-slides #monthSlider [options]=\"sliderOptions\" [dir]=\"dir\" (ionSlideDidChange)=\"onSlideChanged()\">\n                <ion-slide>\n                    <table *ngIf=\"0===currentViewIndex\" class=\"table table-bordered table-fixed monthview-datetable\">\n                        <thead>\n                        <tr>\n                            <th *ngFor=\"let dayHeader of views[0].dayHeaders\">\n                                <small>{{dayHeader}}</small>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr *ngFor=\"let row of [0,1,2,3,4,5]\">\n                            <td *ngFor=\"let col of [0,1,2,3,4,5,6]\" tappable (click)=\"select(views[0].dates[row*7+col])\"\n                                [ngClass]=\"getHighlightClass(views[0].dates[row*7+col])\">\n                                <ng-template [ngTemplateOutlet]=\"monthviewDisplayEventTemplate\"\n                                             [ngTemplateOutletContext]=\"{view: views[0], row: row, col: col}\">\n                                </ng-template>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                    <table *ngIf=\"0!==currentViewIndex\" class=\"table table-bordered table-fixed monthview-datetable\">\n                        <thead>\n                        <tr class=\"text-center\">\n                            <th *ngFor=\"let dayHeader of views[0].dayHeaders\">\n                                <small>{{dayHeader}}</small>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr *ngFor=\"let row of [0,1,2,3,4,5]\">\n                            <td *ngFor=\"let col of [0,1,2,3,4,5,6]\">\n                                <ng-template [ngTemplateOutlet]=\"monthviewInactiveDisplayEventTemplate\"\n                                             [ngTemplateOutletContext]=\"{view: views[0], row: row, col: col}\">\n                                </ng-template>\n                            </td>\n                        <tr>\n                        </tbody>\n                    </table>\n                </ion-slide>\n                <ion-slide>\n                    <table *ngIf=\"1===currentViewIndex\" class=\"table table-bordered table-fixed monthview-datetable\">\n                        <thead>\n                        <tr>\n                            <th *ngFor=\"let dayHeader of views[1].dayHeaders\">\n                                <small>{{dayHeader}}</small>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr *ngFor=\"let row of [0,1,2,3,4,5]\">\n                            <td *ngFor=\"let col of [0,1,2,3,4,5,6]\" tappable (click)=\"select(views[1].dates[row*7+col])\"\n                                [ngClass]=\"getHighlightClass(views[1].dates[row*7+col])\">\n                                <ng-template [ngTemplateOutlet]=\"monthviewDisplayEventTemplate\"\n                                             [ngTemplateOutletContext]=\"{view: views[1], row: row, col: col}\">\n                                </ng-template>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                    <table *ngIf=\"1!==currentViewIndex\" class=\"table table-bordered table-fixed monthview-datetable\">\n                        <thead>\n                        <tr class=\"text-center\">\n                            <th *ngFor=\"let dayHeader of views[1].dayHeaders\">\n                                <small>{{dayHeader}}</small>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr *ngFor=\"let row of [0,1,2,3,4,5]\">\n                            <td *ngFor=\"let col of [0,1,2,3,4,5,6]\">\n                                <ng-template [ngTemplateOutlet]=\"monthviewInactiveDisplayEventTemplate\"\n                                             [ngTemplateOutletContext]=\"{view: views[1], row: row, col: col}\">\n                                </ng-template>\n                            </td>\n                        <tr>\n                        </tbody>\n                    </table>\n                </ion-slide>\n                <ion-slide>\n                    <table *ngIf=\"2===currentViewIndex\" class=\"table table-bordered table-fixed monthview-datetable\">\n                        <thead>\n                        <tr>\n                            <th *ngFor=\"let dayHeader of views[2].dayHeaders\">\n                                <small>{{dayHeader}}</small>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr *ngFor=\"let row of [0,1,2,3,4,5]\">\n                            <td *ngFor=\"let col of [0,1,2,3,4,5,6]\" tappable (click)=\"select(views[2].dates[row*7+col])\"\n                                [ngClass]=\"getHighlightClass(views[2].dates[row*7+col])\">\n                                <ng-template [ngTemplateOutlet]=\"monthviewDisplayEventTemplate\"\n                                             [ngTemplateOutletContext]=\"{view: views[2], row: row, col: col}\">\n                                </ng-template>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                    <table *ngIf=\"2!==currentViewIndex\" class=\"table table-bordered table-fixed monthview-datetable\">\n                        <thead>\n                        <tr class=\"text-center\">\n                            <th *ngFor=\"let dayHeader of views[2].dayHeaders\">\n                                <small>{{dayHeader}}</small>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr *ngFor=\"let row of [0,1,2,3,4,5]\">\n                            <td *ngFor=\"let col of [0,1,2,3,4,5,6]\">\n                                <ng-template [ngTemplateOutlet]=\"monthviewInactiveDisplayEventTemplate\"\n                                             [ngTemplateOutletContext]=\"{view: views[2], row: row, col: col}\">\n                                </ng-template>\n                            </td>\n                        <tr>\n                        </tbody>\n                    </table>\n                </ion-slide>\n            </ion-slides>\n            <ng-template [ngTemplateOutlet]=\"monthviewEventDetailTemplate\"\n                         [ngTemplateOutletContext]=\"{showEventDetail:showEventDetail, selectedDate: selectedDate, noEventsLabel: noEventsLabel}\">\n            </ng-template>\n        </div>\n    `,\n    styles: [`\n        .text-muted {\n            color: #999;\n        }\n\n        .table-fixed {\n            table-layout: fixed;\n        }\n\n        .table {\n            width: 100%;\n            max-width: 100%;\n            background-color: transparent;\n        }\n\n        .table > thead > tr > th, .table > tbody > tr > th, .table > tfoot > tr > th, .table > thead > tr > td,\n        .table > tbody > tr > td, .table > tfoot > tr > td {\n            padding: 8px;\n            line-height: 20px;\n            vertical-align: top;\n        }\n\n        .table > thead > tr > th {\n            vertical-align: bottom;\n            border-bottom: 2px solid #ddd;\n        }\n\n        .table > thead:first-child > tr:first-child > th, .table > thead:first-child > tr:first-child > td {\n            border-top: 0\n        }\n\n        .table > tbody + tbody {\n            border-top: 2px solid #ddd;\n        }\n\n        .table-bordered {\n            border: 1px solid #ddd;\n        }\n\n        .table-bordered > thead > tr > th, .table-bordered > tbody > tr > th, .table-bordered > tfoot > tr > th,\n        .table-bordered > thead > tr > td, .table-bordered > tbody > tr > td, .table-bordered > tfoot > tr > td {\n            border: 1px solid #ddd;\n        }\n\n        .table-bordered > thead > tr > th, .table-bordered > thead > tr > td {\n            border-bottom-width: 2px;\n        }\n\n        .table-striped > tbody > tr:nth-child(odd) > td, .table-striped > tbody > tr:nth-child(odd) > th {\n            background-color: #f9f9f9\n        }\n\n        .monthview-primary-with-event {\n            background-color: #3a87ad;\n            color: white;\n        }\n\n        .monthview-current {\n            background-color: #f0f0f0;\n        }\n\n        .monthview-selected {\n            background-color: #009900;\n            color: white;\n        }\n\n        .monthview-datetable td.monthview-disabled {\n            color: lightgrey;\n            cursor: default;\n        }\n\n        .monthview-datetable th {\n            text-align: center;\n        }\n\n        .monthview-datetable td {\n            cursor: pointer;\n            text-align: center;\n        }\n\n        .monthview-secondary-with-event {\n            background-color: #d9edf7;\n        }\n\n        ::-webkit-scrollbar,\n        *::-webkit-scrollbar {\n            display: none;\n        }\n    `]\n})\nexport class MonthViewComponent implements ICalendarComponent, OnInit, OnDestroy, OnChanges, AfterViewInit {\n\n    constructor(private calendarService: CalendarService) {\n    }\n    ;\n\n    @ViewChild('monthSlider', {static: true}) slider: IonSlides;\n\n    @Input() monthviewDisplayEventTemplate: TemplateRef<IMonthViewDisplayEventTemplateContext>;\n    @Input() monthviewInactiveDisplayEventTemplate: TemplateRef<IMonthViewDisplayEventTemplateContext>;\n    @Input() monthviewEventDetailTemplate: TemplateRef<IMonthViewDisplayEventTemplateContext>;\n\n    @Input() formatDay: string;\n    @Input() formatDayHeader: string;\n    @Input() formatMonthTitle: string;\n    @Input() eventSource: IEvent[];\n    @Input() startingDayMonth: number;\n    @Input() showEventDetail: boolean;\n    @Input() noEventsLabel: string;\n    @Input() autoSelect = true;\n    @Input() markDisabled: (date: Date) => boolean;\n    @Input() locale: string;\n    @Input() dateFormatter: IDateFormatter;\n    @Input() dir = '';\n    @Input() lockSwipeToPrev: boolean;\n    @Input() lockSwipes: boolean;\n    @Input() sliderOptions: any;\n\n    @Output() onRangeChanged = new EventEmitter<IRange>();\n    @Output() onEventSelected = new EventEmitter<IEvent>();\n    @Output() onTimeSelected = new EventEmitter<ITimeSelected>(true);\n    @Output() onTitleChanged = new EventEmitter<string>(true);\n\n    public views: IMonthView[] = [];\n    public currentViewIndex = 0;\n    public selectedDate: IMonthViewRow;\n    public range: IRange;\n    public mode: CalendarMode = 'month';\n    public direction = 0;\n\n    private moveOnSelected = false;\n    private inited = false;\n    private callbackOnInit = true;\n\n    private currentDateChangedFromParentSubscription: Subscription;\n    private eventSourceChangedSubscription: Subscription;\n    private slideChangedSubscription: Subscription;\n    private slideUpdatedSubscription: Subscription;\n\n    private formatDayLabel: (date: Date) => string;\n    private formatDayHeaderLabel: (date: Date) => string;\n    private formatTitle: (date: Date) => string;\n\n    static getDates(startDate: Date, n: number): Date[] {\n        const dates = new Array(n),\n            current = new Date(startDate.getTime());\n        let i = 0;\n        while (i < n) {\n            dates[i++] = new Date(current.getTime());\n            current.setDate(current.getDate() + 1);\n        }\n        return dates;\n    }\n\n    ngOnInit() {\n        if (!this.sliderOptions) {\n            this.sliderOptions = {};\n        }\n        this.sliderOptions.loop = true;\n\n        if (this.dateFormatter && this.dateFormatter.formatMonthViewDay) {\n            this.formatDayLabel = this.dateFormatter.formatMonthViewDay;\n        } else {\n            const dayLabelDatePipe = new DatePipe('en-US');\n            this.formatDayLabel = function(date: Date) {\n                return dayLabelDatePipe.transform(date, this.formatDay);\n            };\n        }\n\n        if (this.dateFormatter && this.dateFormatter.formatMonthViewDayHeader) {\n            this.formatDayHeaderLabel = this.dateFormatter.formatMonthViewDayHeader;\n        } else {\n            const datePipe = new DatePipe(this.locale);\n            this.formatDayHeaderLabel = function(date: Date) {\n                return datePipe.transform(date, this.formatDayHeader);\n            };\n        }\n\n        if (this.dateFormatter && this.dateFormatter.formatMonthViewTitle) {\n            this.formatTitle = this.dateFormatter.formatMonthViewTitle;\n        } else {\n            const datePipe = new DatePipe(this.locale);\n            this.formatTitle = function(date: Date) {\n                return datePipe.transform(date, this.formatMonthTitle);\n            };\n        }\n\n        if (this.lockSwipeToPrev) {\n            this.slider.lockSwipeToPrev(true);\n        }\n\n        if (this.lockSwipes) {\n            this.slider.lockSwipes(true);\n        }\n\n        this.refreshView();\n        this.inited = true;\n\n        this.currentDateChangedFromParentSubscription = this.calendarService.currentDateChangedFromParent$.subscribe(currentDate => {\n            this.refreshView();\n        });\n\n        this.eventSourceChangedSubscription = this.calendarService.eventSourceChanged$.subscribe(() => {\n            this.onDataLoaded();\n        });\n\n        this.slideChangedSubscription = this.calendarService.slideChanged$.subscribe(direction => {\n            if (direction === 1) {\n                this.slider.slideNext();\n            } else if (direction === -1) {\n                this.slider.slidePrev();\n            }\n        });\n\n        this.slideUpdatedSubscription = this.calendarService.slideUpdated$.subscribe(() => {\n            this.slider.update();\n        });\n    }\n\n    ngOnDestroy() {\n        if (this.currentDateChangedFromParentSubscription) {\n            this.currentDateChangedFromParentSubscription.unsubscribe();\n            this.currentDateChangedFromParentSubscription = null;\n        }\n\n        if (this.eventSourceChangedSubscription) {\n            this.eventSourceChangedSubscription.unsubscribe();\n            this.eventSourceChangedSubscription = null;\n        }\n\n        if (this.slideChangedSubscription) {\n            this.slideChangedSubscription.unsubscribe();\n            this.slideChangedSubscription = null;\n        }\n\n        if (this.slideUpdatedSubscription) {\n            this.slideUpdatedSubscription.unsubscribe();\n            this.slideUpdatedSubscription = null;\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (!this.inited) {\n            return;\n        }\n\n        const eventSourceChange = changes.eventSource;\n        if (eventSourceChange && eventSourceChange.currentValue) {\n            this.onDataLoaded();\n        }\n\n        const lockSwipeToPrev = changes.lockSwipeToPrev;\n        if (lockSwipeToPrev) {\n            this.slider.lockSwipeToPrev(lockSwipeToPrev.currentValue);\n        }\n\n        const lockSwipes = changes.lockSwipes;\n        if (lockSwipes) {\n            this.slider.lockSwipes(lockSwipes.currentValue);\n        }\n    }\n\n    ngAfterViewInit() {\n        const title = this.getTitle();\n        this.onTitleChanged.emit(title);\n    }\n\n    onSlideChanged() {\n        if (this.callbackOnInit) {\n            this.callbackOnInit = false;\n            return;\n        }\n\n        let direction = 0;\n        const currentViewIndex = this.currentViewIndex;\n\n        this.slider.getActiveIndex().then((currentSlideIndex) => {\n            currentSlideIndex = (currentSlideIndex + 2) % 3;\n            if(isNaN(currentSlideIndex)) {\n                currentSlideIndex = currentViewIndex;\n            }\n\n            if (currentSlideIndex - currentViewIndex === 1) {\n                direction = 1;\n            } else if (currentSlideIndex === 0 && currentViewIndex === 2) {\n                direction = 1;\n                this.slider.slideTo(1, 0, false);\n            } else if (currentViewIndex - currentSlideIndex === 1) {\n                direction = -1;\n            } else if (currentSlideIndex === 2 && currentViewIndex === 0) {\n                direction = -1;\n                this.slider.slideTo(3, 0, false);\n            }\n            this.currentViewIndex = currentSlideIndex;\n            this.move(direction);\n        });\n    }\n\n    move(direction: number) {\n        if (direction === 0) {\n            return;\n        }\n\n        this.direction = direction;\n        if (!this.moveOnSelected) {\n            const adjacentDate = this.calendarService.getAdjacentCalendarDate(this.mode, direction);\n            this.calendarService.setCurrentDate(adjacentDate);\n        }\n        this.refreshView();\n        this.direction = 0;\n        this.moveOnSelected = false;\n    }\n\n    createDateObject(date: Date): IMonthViewRow {\n        let disabled = false;\n        if (this.markDisabled) {\n            disabled = this.markDisabled(date);\n        }\n\n        return {\n            date,\n            events: [],\n            label: this.formatDayLabel(date),\n            secondary: false,\n            disabled\n        };\n    }\n\n    getViewData(startTime: Date): IMonthView {\n        const startDate = startTime,\n            date = startDate.getDate(),\n            month = (startDate.getMonth() + (date !== 1 ? 1 : 0)) % 12;\n\n        const dates = MonthViewComponent.getDates(startDate, 42);\n        const days: IMonthViewRow[] = [];\n        for (let i = 0; i < 42; i++) {\n            const dateObject = this.createDateObject(dates[i]);\n            dateObject.secondary = dates[i].getMonth() !== month;\n            days[i] = dateObject;\n        }\n\n        const dayHeaders: string[] = [];\n        for (let i = 0; i < 7; i++) {\n            dayHeaders.push(this.formatDayHeaderLabel(days[i].date));\n        }\n        return {\n            dates: days,\n            dayHeaders\n        };\n    }\n\n    getHighlightClass(date: IMonthViewRow): string {\n        let className = '';\n\n        if (date.hasEvent) {\n            if (date.secondary) {\n                className = 'monthview-secondary-with-event';\n            } else {\n                className = 'monthview-primary-with-event';\n            }\n        }\n\n        if (date.selected) {\n            if (className) {\n                className += ' ';\n            }\n            className += 'monthview-selected';\n        }\n\n        if (date.current) {\n            if (className) {\n                className += ' ';\n            }\n            className += 'monthview-current';\n        }\n\n        if (date.secondary) {\n            if (className) {\n                className += ' ';\n            }\n            className += 'text-muted';\n        }\n\n        if (date.disabled) {\n            if (className) {\n                className += ' ';\n            }\n            className += 'monthview-disabled';\n        }\n        return className;\n    }\n\n    getRange(currentDate: Date): IRange {\n        const year = currentDate.getFullYear(),\n            month = currentDate.getMonth(),\n            firstDayOfMonth = new Date(year, month, 1, 12, 0, 0), // set hour to 12 to avoid DST problem\n\n            difference = this.startingDayMonth - firstDayOfMonth.getDay(),\n            numDisplayedFromPreviousMonth = (difference > 0) ? 7 - difference : -difference,\n            startDate = new Date(firstDayOfMonth.getTime());\n\n        if (numDisplayedFromPreviousMonth > 0) {\n            startDate.setDate(-numDisplayedFromPreviousMonth + 1);\n        }\n\n        const endDate = new Date(startDate.getTime());\n        endDate.setDate(endDate.getDate() + 42);\n\n        return {\n            startTime: startDate,\n            endTime: endDate\n        };\n    }\n\n    onDataLoaded() {\n        const range = this.range,\n            eventSource = this.eventSource,\n            len = eventSource ? eventSource.length : 0,\n            startTime = range.startTime,\n            endTime = range.endTime,\n            utcStartTime = Date.UTC(startTime.getFullYear(), startTime.getMonth(), startTime.getDate()),\n            utcEndTime = Date.UTC(endTime.getFullYear(), endTime.getMonth(), endTime.getDate()),\n            currentViewIndex = this.currentViewIndex,\n            dates = this.views[currentViewIndex].dates,\n            oneDay = 86400000,\n            eps = 0.0006;\n\n        for (let r = 0; r < 42; r += 1) {\n            if (dates[r].hasEvent) {\n                dates[r].hasEvent = false;\n                dates[r].events = [];\n            }\n        }\n\n        for (let i = 0; i < len; i += 1) {\n            const event = eventSource[i],\n                eventStartTime = event.startTime,\n                eventEndTime = event.endTime;\n\n            let eventUTCStartTime: number,\n                eventUTCEndTime: number;\n            if (event.allDay) {\n                eventUTCStartTime = eventStartTime.getTime();\n                eventUTCEndTime = eventEndTime.getTime();\n            } else {\n                eventUTCStartTime = Date.UTC(eventStartTime.getFullYear(), eventStartTime.getMonth(), eventStartTime.getDate());\n                eventUTCEndTime = Date.UTC(eventEndTime.getFullYear(), eventEndTime.getMonth(), eventEndTime.getDate() + 1);\n            }\n\n            if (eventUTCEndTime <= utcStartTime || eventUTCStartTime >= utcEndTime) {\n                continue;\n            }\n\n            let timeDifferenceStart: number,\n                timeDifferenceEnd: number;\n\n            if (eventUTCStartTime < utcStartTime) {\n                timeDifferenceStart = 0;\n            } else {\n                timeDifferenceStart = (eventUTCStartTime - utcStartTime) / oneDay;\n            }\n\n            if (eventUTCEndTime > utcEndTime) {\n                timeDifferenceEnd = (utcEndTime - utcStartTime) / oneDay;\n            } else {\n                timeDifferenceEnd = (eventUTCEndTime - utcStartTime) / oneDay;\n            }\n\n            let index = Math.floor(timeDifferenceStart);\n            const endIndex = Math.ceil(timeDifferenceEnd - eps);\n            while (index < endIndex) {\n                dates[index].hasEvent = true;\n                let eventSet = dates[index].events;\n                if (eventSet) {\n                    eventSet.push(event);\n                } else {\n                    eventSet = [];\n                    eventSet.push(event);\n                    dates[index].events = eventSet;\n                }\n                index += 1;\n            }\n        }\n\n        for (let r = 0; r < 42; r += 1) {\n            if (dates[r].hasEvent) {\n                dates[r].events.sort(this.compareEvent);\n            }\n        }\n\n        if (this.autoSelect) {\n            let findSelected = false;\n            for (let r = 0; r < 42; r += 1) {\n                if (dates[r].selected) {\n                    this.selectedDate = dates[r];\n                    findSelected = true;\n                    break;\n                }\n            }\n\n            if (findSelected) {\n                this.onTimeSelected.emit({\n                    selectedTime: this.selectedDate.date,\n                    events: this.selectedDate.events,\n                    disabled: this.selectedDate.disabled\n                });\n            }\n        }\n    }\n\n    refreshView() {\n        this.range = this.getRange(this.calendarService.currentDate);\n\n        if (this.inited) {\n            const title = this.getTitle();\n            this.onTitleChanged.emit(title);\n        }\n        this.calendarService.populateAdjacentViews(this);\n        this.updateCurrentView(this.range.startTime, this.views[this.currentViewIndex]);\n        this.calendarService.rangeChanged(this);\n    }\n\n    getTitle(): string {\n        const currentViewStartDate = this.range.startTime,\n            date = currentViewStartDate.getDate(),\n            month = (currentViewStartDate.getMonth() + (date !== 1 ? 1 : 0)) % 12,\n            year = currentViewStartDate.getFullYear() + (date !== 1 && month === 0 ? 1 : 0),\n            headerDate = new Date(year, month, 1, 12, 0, 0, 0);\n        return this.formatTitle(headerDate);\n    }\n\n    private compareEvent(event1: IEvent, event2: IEvent): number {\n        if (event1.allDay) {\n            return 1;\n        } else if (event2.allDay) {\n            return -1;\n        } else {\n            return (event1.startTime.getTime() - event2.startTime.getTime());\n        }\n    }\n\n    select(viewDate: IMonthViewRow) {\n        if (!this.views) {\n            return;\n        }\n\n        const selectedDate = viewDate.date,\n            events = viewDate.events;\n\n        if (!viewDate.disabled) {\n            const dates = this.views[this.currentViewIndex].dates,\n                currentCalendarDate = this.calendarService.currentDate,\n                currentMonth = currentCalendarDate.getMonth(),\n                currentYear = currentCalendarDate.getFullYear(),\n                selectedMonth = selectedDate.getMonth(),\n                selectedYear = selectedDate.getFullYear();\n            let direction = 0;\n\n            if (currentYear === selectedYear) {\n                if (currentMonth !== selectedMonth) {\n                    direction = currentMonth < selectedMonth ? 1 : -1;\n                }\n            } else {\n                direction = currentYear < selectedYear ? 1 : -1;\n            }\n\n            this.calendarService.setCurrentDate(selectedDate);\n            if (direction === 0) {\n                const currentViewStartDate = this.range.startTime,\n                    oneDay = 86400000,\n                    selectedDayDifference = Math.round((Date.UTC(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate()) - Date.UTC(currentViewStartDate.getFullYear(), currentViewStartDate.getMonth(), currentViewStartDate.getDate())) / oneDay);\n\n                for (let r = 0; r < 42; r += 1) {\n                    dates[r].selected = false;\n                }\n\n                if (selectedDayDifference >= 0 && selectedDayDifference < 42) {\n                    dates[selectedDayDifference].selected = true;\n                    this.selectedDate = dates[selectedDayDifference];\n                }\n            } else {\n                this.moveOnSelected = true;\n                this.slideView(direction);\n            }\n        }\n\n        this.onTimeSelected.emit({selectedTime: selectedDate, events, disabled: viewDate.disabled});\n    }\n\n    slideView(direction: number) {\n        if (direction === 1) {\n            this.slider.slideNext();\n        } else if (direction === -1) {\n            this.slider.slidePrev();\n        }\n    }\n\n    updateCurrentView(currentViewStartDate: Date, view: IMonthView) {\n        const currentCalendarDate = this.calendarService.currentDate,\n            today = new Date(),\n            oneDay = 86400000,\n            selectedDayDifference = Math.round((Date.UTC(currentCalendarDate.getFullYear(), currentCalendarDate.getMonth(), currentCalendarDate.getDate()) - Date.UTC(currentViewStartDate.getFullYear(), currentViewStartDate.getMonth(), currentViewStartDate.getDate())) / oneDay),\n            currentDayDifference = Math.round((Date.UTC(today.getFullYear(), today.getMonth(), today.getDate()) - Date.UTC(currentViewStartDate.getFullYear(), currentViewStartDate.getMonth(), currentViewStartDate.getDate())) / oneDay);\n\n        for (let r = 0; r < 42; r += 1) {\n            view.dates[r].selected = false;\n        }\n\n        if (selectedDayDifference >= 0 && selectedDayDifference < 42 && !view.dates[selectedDayDifference].disabled && (this.autoSelect || this.moveOnSelected)) {\n            view.dates[selectedDayDifference].selected = true;\n            this.selectedDate = view.dates[selectedDayDifference];\n        } else {\n            this.selectedDate = {\n                date: null,\n                events: [],\n                label: null,\n                secondary: null,\n                disabled: false\n            };\n        }\n\n        if (currentDayDifference >= 0 && currentDayDifference < 42) {\n            view.dates[currentDayDifference].current = true;\n        }\n    }\n\n    eventSelected(event: IEvent) {\n        this.onEventSelected.emit(event);\n    }\n}\n","import {DatePipe} from '@angular/common';\nimport {IonSlides} from '@ionic/angular';\nimport {\n    Component,\n    OnInit,\n    OnChanges,\n    HostBinding,\n    Input,\n    Output,\n    EventEmitter,\n    SimpleChanges,\n    ViewChild,\n    ViewEncapsulation,\n    TemplateRef,\n    ElementRef,\n    OnDestroy, AfterViewInit\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\n\nimport {\n    ICalendarComponent,\n    IDisplayEvent,\n    IEvent,\n    ITimeSelected,\n    IRange,\n    IWeekView,\n    IWeekViewRow,\n    IWeekViewDateRow,\n    CalendarMode,\n    IDateFormatter,\n    IDisplayWeekViewHeader\n} from './calendar';\nimport {CalendarService} from './calendar.service';\nimport {\n    IDisplayAllDayEvent,\n    IWeekViewAllDayEventSectionTemplateContext,\n    IWeekViewNormalEventSectionTemplateContext\n} from './calendar';\n\n@Component({\n    selector: 'weekview',\n    template: `\n        <ion-slides #weekSlider [options]=\"sliderOptions\" [dir]=\"dir\" (ionSlideDidChange)=\"onSlideChanged()\"\n                    class=\"slides-container\">\n            <ion-slide class=\"slide-container\">\n                <table class=\"table table-bordered table-fixed weekview-header\">\n                    <thead>\n                    <tr>\n                        <th class=\"calendar-hour-column\"></th>\n                        <th class=\"weekview-header text-center\" *ngFor=\"let date of views[0].dates\"\n                            [ngClass]=\"getHighlightClass(date)\"\n                            (click)=\"daySelected(date)\">\n                            <ng-template [ngTemplateOutlet]=\"weekviewHeaderTemplate\"\n                                         [ngTemplateOutletContext]=\"{viewDate:date}\">\n                            </ng-template>\n                        </th>\n                    </tr>\n                    </thead>\n                </table>\n                <div *ngIf=\"0===currentViewIndex\">\n                    <div class=\"weekview-allday-table\">\n                        <div class=\"weekview-allday-label\">{{allDayLabel}}</div>\n                        <div class=\"weekview-allday-content-wrapper scroll-content\">\n                            <table class=\"table table-fixed weekview-allday-content-table\">\n                                <tbody>\n                                <tr>\n                                    <td *ngFor=\"let day of views[0].dates\" class=\"calendar-cell\">\n                                        <ng-template [ngTemplateOutlet]=\"weekviewAllDayEventSectionTemplate\"\n                                                     [ngTemplateOutletContext]=\"{day:day, eventTemplate:weekviewAllDayEventTemplate}\">\n                                        </ng-template>\n                                    </td>\n                                </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                    <init-position-scroll class=\"weekview-normal-event-container\" [initPosition]=\"initScrollPosition\"\n                                          [emitEvent]=\"preserveScrollPosition\" (onScroll)=\"setScrollPosition($event)\">\n                        <table class=\"table table-bordered table-fixed weekview-normal-event-table\">\n                            <tbody>\n                            <tr *ngFor=\"let row of views[0].rows; let i = index\">\n                                <td class=\"calendar-hour-column text-center\">\n                                    {{hourColumnLabels[i]}}\n                                </td>\n                                <td *ngFor=\"let tm of row\" class=\"calendar-cell\" tappable\n                                    (click)=\"select(tm.time, tm.events)\">\n                                    <ng-template [ngTemplateOutlet]=\"weekviewNormalEventSectionTemplate\"\n                                                 [ngTemplateOutletContext]=\"{tm:tm, hourParts: hourParts, eventTemplate:weekviewNormalEventTemplate}\">\n                                    </ng-template>\n                                </td>\n                            </tr>\n                            </tbody>\n                        </table>\n                    </init-position-scroll>\n                </div>\n                <div *ngIf=\"0!==currentViewIndex\">\n                    <div class=\"weekview-allday-table\">\n                        <div class=\"weekview-allday-label\">{{allDayLabel}}</div>\n                        <div class=\"weekview-allday-content-wrapper scroll-content\">\n                            <table class=\"table table-fixed weekview-allday-content-table\">\n                                <tbody>\n                                <tr>\n                                    <td *ngFor=\"let day of views[0].dates\" class=\"calendar-cell\">\n                                        <ng-template [ngTemplateOutlet]=\"weekviewInactiveAllDayEventSectionTemplate\"\n                                                     [ngTemplateOutletContext]=\"{day:day}\">\n                                        </ng-template>\n                                    </td>\n                                </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                    <init-position-scroll class=\"weekview-normal-event-container\" [initPosition]=\"initScrollPosition\">\n                        <table class=\"table table-bordered table-fixed weekview-normal-event-table\">\n                            <tbody>\n                            <tr *ngFor=\"let row of views[0].rows; let i = index\">\n                                <td class=\"calendar-hour-column text-center\">\n                                    {{hourColumnLabels[i]}}\n                                </td>\n                                <td *ngFor=\"let tm of row\" class=\"calendar-cell\">\n                                    <ng-template [ngTemplateOutlet]=\"weekviewInactiveNormalEventSectionTemplate\"\n                                                 [ngTemplateOutletContext]=\"{tm:tm, hourParts: hourParts}\">\n                                    </ng-template>\n                                </td>\n                            </tr>\n                            </tbody>\n                        </table>\n                    </init-position-scroll>\n                </div>\n            </ion-slide>\n            <ion-slide class=\"slide-container\">\n                <table class=\"table table-bordered table-fixed weekview-header\">\n                    <thead>\n                    <tr>\n                        <th class=\"calendar-hour-column\"></th>\n                        <th class=\"weekview-header text-center\" *ngFor=\"let date of views[1].dates\"\n                            [ngClass]=\"getHighlightClass(date)\"\n                            (click)=\"daySelected(date)\">\n                            <ng-template [ngTemplateOutlet]=\"weekviewHeaderTemplate\"\n                                         [ngTemplateOutletContext]=\"{viewDate:date}\">\n                            </ng-template>\n                        </th>\n                    </tr>\n                    </thead>\n                </table>\n                <div *ngIf=\"1===currentViewIndex\">\n                    <div class=\"weekview-allday-table\">\n                        <div class=\"weekview-allday-label\">{{allDayLabel}}</div>\n                        <div class=\"weekview-allday-content-wrapper scroll-content\">\n                            <table class=\"table table-fixed weekview-allday-content-table\">\n                                <tbody>\n                                <tr>\n                                    <td *ngFor=\"let day of views[1].dates\" class=\"calendar-cell\">\n                                        <ng-template [ngTemplateOutlet]=\"weekviewAllDayEventSectionTemplate\"\n                                                     [ngTemplateOutletContext]=\"{day:day, eventTemplate:weekviewAllDayEventTemplate}\">\n                                        </ng-template>\n                                    </td>\n                                </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                    <init-position-scroll class=\"weekview-normal-event-container\" [initPosition]=\"initScrollPosition\"\n                                          [emitEvent]=\"preserveScrollPosition\" (onScroll)=\"setScrollPosition($event)\">\n                        <table class=\"table table-bordered table-fixed weekview-normal-event-table\">\n                            <tbody>\n                            <tr *ngFor=\"let row of views[1].rows; let i = index\">\n                                <td class=\"calendar-hour-column text-center\">\n                                    {{hourColumnLabels[i]}}\n                                </td>\n                                <td *ngFor=\"let tm of row\" class=\"calendar-cell\" tappable\n                                    (click)=\"select(tm.time, tm.events)\">\n                                    <div [ngClass]=\"{'calendar-event-wrap': tm.events}\" *ngIf=\"tm.events\">\n                                        <ng-template [ngTemplateOutlet]=\"weekviewNormalEventSectionTemplate\"\n                                                     [ngTemplateOutletContext]=\"{tm:tm, hourParts: hourParts, eventTemplate:weekviewNormalEventTemplate}\">\n                                        </ng-template>\n                                    </div>\n                                </td>\n                            </tr>\n                            </tbody>\n                        </table>\n                    </init-position-scroll>\n                </div>\n                <div *ngIf=\"1!==currentViewIndex\">\n                    <div class=\"weekview-allday-table\">\n                        <div class=\"weekview-allday-label\">{{allDayLabel}}</div>\n                        <div class=\"weekview-allday-content-wrapper scroll-content\">\n                            <table class=\"table table-fixed weekview-allday-content-table\">\n                                <tbody>\n                                <tr>\n                                    <td *ngFor=\"let day of views[1].dates\" class=\"calendar-cell\">\n                                        <ng-template [ngTemplateOutlet]=\"weekviewInactiveAllDayEventSectionTemplate\"\n                                                     [ngTemplateOutletContext]=\"{day:day}\">\n                                        </ng-template>\n                                    </td>\n                                </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                    <init-position-scroll class=\"weekview-normal-event-container\" [initPosition]=\"initScrollPosition\">\n                        <table class=\"table table-bordered table-fixed weekview-normal-event-table\">\n                            <tbody>\n                            <tr *ngFor=\"let row of views[1].rows; let i = index\">\n                                <td class=\"calendar-hour-column text-center\">\n                                    {{hourColumnLabels[i]}}\n                                </td>\n                                <td *ngFor=\"let tm of row\" class=\"calendar-cell\">\n                                    <div [ngClass]=\"{'calendar-event-wrap': tm.events}\" *ngIf=\"tm.events\">\n                                        <ng-template [ngTemplateOutlet]=\"weekviewInactiveNormalEventSectionTemplate\"\n                                                     [ngTemplateOutletContext]=\"{tm:tm, hourParts: hourParts}\">\n                                        </ng-template>\n                                    </div>\n                                </td>\n                            </tr>\n                            </tbody>\n                        </table>\n                    </init-position-scroll>\n                </div>\n            </ion-slide>\n            <ion-slide class=\"slide-container\">\n                <table class=\"table table-bordered table-fixed weekview-header\">\n                    <thead>\n                    <tr>\n                        <th class=\"calendar-hour-column\"></th>\n                        <th class=\"weekview-header text-center\" *ngFor=\"let date of views[2].dates\"\n                            [ngClass]=\"getHighlightClass(date)\"\n                            (click)=\"daySelected(date)\">\n                            <ng-template [ngTemplateOutlet]=\"weekviewHeaderTemplate\"\n                                         [ngTemplateOutletContext]=\"{viewDate:date}\">\n                            </ng-template>\n                        </th>\n                    </tr>\n                    </thead>\n                </table>\n                <div *ngIf=\"2===currentViewIndex\">\n                    <div class=\"weekview-allday-table\">\n                        <div class=\"weekview-allday-label\">{{allDayLabel}}</div>\n                        <div class=\"weekview-allday-content-wrapper scroll-content\">\n                            <table class=\"table table-fixed weekview-allday-content-table\">\n                                <tbody>\n                                <tr>\n                                    <td *ngFor=\"let day of views[2].dates\" class=\"calendar-cell\">\n                                        <ng-template [ngTemplateOutlet]=\"weekviewAllDayEventSectionTemplate\"\n                                                     [ngTemplateOutletContext]=\"{day:day, eventTemplate:weekviewAllDayEventTemplate}\">\n                                        </ng-template>\n                                    </td>\n                                </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                    <init-position-scroll class=\"weekview-normal-event-container\" [initPosition]=\"initScrollPosition\"\n                                          [emitEvent]=\"preserveScrollPosition\" (onScroll)=\"setScrollPosition($event)\">\n                        <table class=\"table table-bordered table-fixed weekview-normal-event-table\">\n                            <tbody>\n                            <tr *ngFor=\"let row of views[2].rows; let i = index\">\n                                <td class=\"calendar-hour-column text-center\">\n                                    {{hourColumnLabels[i]}}\n                                </td>\n                                <td *ngFor=\"let tm of row\" class=\"calendar-cell\" tappable\n                                    (click)=\"select(tm.time, tm.events)\">\n                                    <div [ngClass]=\"{'calendar-event-wrap': tm.events}\" *ngIf=\"tm.events\">\n                                        <ng-template [ngTemplateOutlet]=\"weekviewNormalEventSectionTemplate\"\n                                                     [ngTemplateOutletContext]=\"{tm:tm, hourParts: hourParts, eventTemplate:weekviewNormalEventTemplate}\">\n                                        </ng-template>\n                                    </div>\n                                </td>\n                            </tr>\n                            </tbody>\n                        </table>\n                    </init-position-scroll>\n                </div>\n                <div *ngIf=\"2!==currentViewIndex\">\n                    <div class=\"weekview-allday-table\">\n                        <div class=\"weekview-allday-label\">{{allDayLabel}}</div>\n                        <div class=\"weekview-allday-content-wrapper scroll-content\">\n                            <table class=\"table table-fixed weekview-allday-content-table\">\n                                <tbody>\n                                <tr>\n                                    <td *ngFor=\"let day of views[2].dates\" class=\"calendar-cell\">\n                                        <ng-template [ngTemplateOutlet]=\"weekviewInactiveAllDayEventSectionTemplate\"\n                                                     [ngTemplateOutletContext]=\"{day:day}\">\n                                        </ng-template>\n                                    </td>\n                                </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                    <init-position-scroll class=\"weekview-normal-event-container\" [initPosition]=\"initScrollPosition\">\n                        <table class=\"table table-bordered table-fixed weekview-normal-event-table\">\n                            <tbody>\n                            <tr *ngFor=\"let row of views[2].rows; let i = index\">\n                                <td class=\"calendar-hour-column text-center\">\n                                    {{hourColumnLabels[i]}}\n                                </td>\n                                <td *ngFor=\"let tm of row\" class=\"calendar-cell\">\n                                    <div [ngClass]=\"{'calendar-event-wrap': tm.events}\" *ngIf=\"tm.events\">\n                                        <ng-template [ngTemplateOutlet]=\"weekviewInactiveNormalEventSectionTemplate\"\n                                                     [ngTemplateOutletContext]=\"{tm:tm, hourParts: hourParts}\">\n                                        </ng-template>\n                                    </div>\n                                </td>\n                            </tr>\n                            </tbody>\n                        </table>\n                    </init-position-scroll>\n                </div>\n            </ion-slide>\n        </ion-slides>\n    `,\n    styles: [`\n        .table-fixed {\n            table-layout: fixed;\n        }\n\n        .table {\n            width: 100%;\n            max-width: 100%;\n            background-color: transparent;\n        }\n\n        .table > thead > tr > th, .table > tbody > tr > th, .table > tfoot > tr > th, .table > thead > tr > td,\n        .table > tbody > tr > td, .table > tfoot > tr > td {\n            padding: 8px;\n            line-height: 20px;\n            vertical-align: top;\n        }\n\n        .table > thead > tr > th {\n            vertical-align: bottom;\n            border-bottom: 2px solid #ddd;\n        }\n\n        .table > thead:first-child > tr:first-child > th, .table > thead:first-child > tr:first-child > td {\n            border-top: 0\n        }\n\n        .table > tbody + tbody {\n            border-top: 2px solid #ddd;\n        }\n\n        .table-bordered {\n            border: 1px solid #ddd;\n        }\n\n        .table-bordered > thead > tr > th, .table-bordered > tbody > tr > th, .table-bordered > tfoot > tr > th,\n        .table-bordered > thead > tr > td, .table-bordered > tbody > tr > td, .table-bordered > tfoot > tr > td {\n            border: 1px solid #ddd;\n        }\n\n        .table-bordered > thead > tr > th, .table-bordered > thead > tr > td {\n            border-bottom-width: 2px;\n        }\n\n        .table-striped > tbody > tr:nth-child(odd) > td, .table-striped > tbody > tr:nth-child(odd) > th {\n            background-color: #f9f9f9\n        }\n\n        .calendar-hour-column {\n            width: 50px;\n            white-space: nowrap;\n        }\n\n        .calendar-event-wrap {\n            position: relative;\n            width: 100%;\n            height: 100%;\n        }\n\n        .calendar-event {\n            position: absolute;\n            padding: 2px;\n            cursor: pointer;\n            z-index: 10000;\n        }\n\n        .calendar-cell {\n            padding: 0 !important;\n            height: 37px;\n        }\n\n        .slides-container {\n            height: 100%;\n        }\n\n        .slide-container {\n            display: block;\n        }\n\n        .weekview-allday-label {\n            float: left;\n            height: 100%;\n            line-height: 50px;\n            text-align: center;\n            width: 50px;\n            border-left: 1px solid #ddd;\n        }\n\n        [dir=\"rtl\"] .weekview-allday-label {\n            float: right;\n            border-right: 1px solid #ddd;\n        }\n\n        .weekview-allday-content-wrapper {\n            margin-left: 50px;\n            overflow: hidden;\n            height: 51px;\n        }\n\n        [dir=\"rtl\"] .weekview-allday-content-wrapper {\n            margin-left: 0;\n            margin-right: 50px;\n        }\n\n        .weekview-allday-content-table {\n            min-height: 50px;\n        }\n\n        .weekview-allday-content-table td {\n            border-left: 1px solid #ddd;\n            border-right: 1px solid #ddd;\n        }\n\n        .weekview-header th {\n            overflow: hidden;\n            white-space: nowrap;\n            font-size: 14px;\n        }\n\n        .weekview-allday-table {\n            height: 50px;\n            position: relative;\n            border-bottom: 1px solid #ddd;\n            font-size: 14px;\n        }\n\n        .weekview-normal-event-container {\n            margin-top: 87px;\n            overflow: hidden;\n            left: 0;\n            right: 0;\n            top: 0;\n            bottom: 0;\n            position: absolute;\n            font-size: 14px;\n        }\n\n        .scroll-content {\n            overflow-y: auto;\n            overflow-x: hidden;\n        }\n\n        ::-webkit-scrollbar,\n        *::-webkit-scrollbar {\n            display: none;\n        }\n\n        .table > tbody > tr > td.calendar-hour-column {\n            padding-left: 0;\n            padding-right: 0;\n            vertical-align: middle;\n        }\n\n        @media (max-width: 750px) {\n            .weekview-allday-label, .calendar-hour-column {\n                width: 31px;\n                font-size: 12px;\n            }\n\n            .weekview-allday-label {\n                padding-top: 4px;\n            }\n\n            .table > tbody > tr > td.calendar-hour-column {\n                padding-left: 0;\n                padding-right: 0;\n                vertical-align: middle;\n                line-height: 12px;\n            }\n\n            .table > thead > tr > th.weekview-header {\n                padding-left: 0;\n                padding-right: 0;\n                font-size: 12px;\n            }\n\n            .weekview-allday-label {\n                line-height: 20px;\n            }\n\n            .weekview-allday-content-wrapper {\n                margin-left: 31px;\n            }\n\n            [dir=\"rtl\"] .weekview-allday-content-wrapper {\n                margin-left: 0;\n                margin-right: 31px;\n            }\n        }\n    `],\n    encapsulation: ViewEncapsulation.None\n})\nexport class WeekViewComponent implements ICalendarComponent, OnInit, OnChanges, OnDestroy, AfterViewInit {\n\n    constructor(private calendarService: CalendarService, private elm: ElementRef) {\n    }\n\n    @ViewChild('weekSlider', {static: true}) slider: IonSlides;\n    @HostBinding('class.weekview') class = true;\n\n    @Input() weekviewHeaderTemplate: TemplateRef<IDisplayWeekViewHeader>;\n    @Input() weekviewAllDayEventTemplate: TemplateRef<IDisplayAllDayEvent>;\n    @Input() weekviewNormalEventTemplate: TemplateRef<IDisplayEvent>;\n    @Input() weekviewAllDayEventSectionTemplate: TemplateRef<IWeekViewAllDayEventSectionTemplateContext>;\n    @Input() weekviewNormalEventSectionTemplate: TemplateRef<IWeekViewNormalEventSectionTemplateContext>;\n    @Input() weekviewInactiveAllDayEventSectionTemplate: TemplateRef<IWeekViewAllDayEventSectionTemplateContext>;\n    @Input() weekviewInactiveNormalEventSectionTemplate: TemplateRef<IWeekViewNormalEventSectionTemplateContext>;\n\n    @Input() formatWeekTitle: string;\n    @Input() formatWeekViewDayHeader: string;\n    @Input() formatHourColumn: string;\n    @Input() startingDayWeek: number;\n    @Input() allDayLabel: string;\n    @Input() hourParts: number;\n    @Input() eventSource: IEvent[];\n    @Input() autoSelect = true;\n    @Input() markDisabled: (date: Date) => boolean;\n    @Input() locale: string;\n    @Input() dateFormatter: IDateFormatter;\n    @Input() dir = '';\n    @Input() scrollToHour = 0;\n    @Input() preserveScrollPosition: boolean;\n    @Input() lockSwipeToPrev: boolean;\n    @Input() lockSwipes: boolean;\n    @Input() startHour: number;\n    @Input() endHour: number;\n    @Input() sliderOptions: any;\n    @Input() hourSegments: number;\n\n    @Output() onRangeChanged = new EventEmitter<IRange>();\n    @Output() onEventSelected = new EventEmitter<IEvent>();\n    @Output() onTimeSelected = new EventEmitter<ITimeSelected>();\n    @Output() onTitleChanged = new EventEmitter<string>(true);\n\n    public views: IWeekView[] = [];\n    public currentViewIndex = 0;\n    public range: IRange;\n    public direction = 0;\n    public mode: CalendarMode = 'week';\n\n    private inited = false;\n    private callbackOnInit = true;\n    private currentDateChangedFromParentSubscription: Subscription;\n    private eventSourceChangedSubscription: Subscription;\n    private slideChangedSubscription: Subscription;\n    private slideUpdatedSubscription: Subscription;\n\n    public hourColumnLabels: string[];\n    public initScrollPosition: number;\n    private formatDayHeader: (date: Date) => string;\n    private formatTitle: (date: Date) => string;\n    private formatHourColumnLabel: (date: Date) => string;\n    private hourRange: number;\n\n    static createDateObjects(startTime: Date, startHour: number, endHour: number, timeInterval: number): IWeekViewRow[][] {\n        const times: IWeekViewRow[][] = [],\n            currentHour = 0,\n            currentDate = startTime.getDate();\n        let hourStep,\n            minStep;\n\n        if (timeInterval < 1) {\n            hourStep = Math.floor(1 / timeInterval);\n            minStep = 60;\n        } else {\n            hourStep = 1;\n            minStep = Math.floor(60 / timeInterval);\n        }\n\n        for (let hour = startHour; hour < endHour; hour += hourStep) {\n            for (let interval = 0; interval < 60; interval += minStep) {\n                const row: IWeekViewRow[] = [];\n                for (let day = 0; day < 7; day += 1) {\n                    const time = new Date(startTime.getTime());\n                    time.setHours(currentHour + hour, interval);\n                    time.setDate(currentDate + day);\n                    row.push({\n                        events: [],\n                        time\n                    });\n                }\n                times.push(row);\n            }\n        }\n        return times;\n    }\n\n    static getDates(startTime: Date, n: number): IWeekViewDateRow[] {\n        const dates = new Array(n),\n            current = new Date(startTime.getTime());\n        let i = 0;\n        while (i < n) {\n            dates[i++] = {\n                date: new Date(current.getTime()),\n                events: [],\n                dayHeader: ''\n            };\n            current.setDate(current.getDate() + 1);\n        }\n        return dates;\n    }\n\n    private static compareEventByStartOffset(eventA: IDisplayEvent, eventB: IDisplayEvent): number {\n        return eventA.startOffset - eventB.startOffset;\n    }\n\n    private static calculateWidth(orderedEvents: IDisplayEvent[], size: number, hourParts: number) {\n        const totalSize = size * hourParts,\n            cells = new Array(totalSize);\n\n        // sort by position in descending order, the right most columns should be calculated first\n        orderedEvents.sort((eventA, eventB) => {\n            return eventB.position - eventA.position;\n        });\n        for (let i = 0; i < totalSize; i += 1) {\n            cells[i] = {\n                calculated: false,\n                events: []\n            };\n        }\n        const len = orderedEvents.length;\n        for (let i = 0; i < len; i += 1) {\n            const event = orderedEvents[i];\n            let index = event.startIndex * hourParts + event.startOffset;\n            while (index < event.endIndex * hourParts - event.endOffset) {\n                cells[index].events.push(event);\n                index += 1;\n            }\n        }\n\n        let i = 0;\n        while (i < len) {\n            let event = orderedEvents[i];\n            if (!event.overlapNumber) {\n                const overlapNumber = event.position + 1;\n                event.overlapNumber = overlapNumber;\n                const eventQueue = [event];\n                while (event = eventQueue.shift()) {\n                    let index = event.startIndex * hourParts + event.startOffset;\n                    while (index < event.endIndex * hourParts - event.endOffset) {\n                        if (!cells[index].calculated) {\n                            cells[index].calculated = true;\n                            if (cells[index].events) {\n                                const eventCountInCell = cells[index].events.length;\n                                for (let j = 0; j < eventCountInCell; j += 1) {\n                                    const currentEventInCell = cells[index].events[j];\n                                    if (!currentEventInCell.overlapNumber) {\n                                        currentEventInCell.overlapNumber = overlapNumber;\n                                        eventQueue.push(currentEventInCell);\n                                    }\n                                }\n                            }\n                        }\n                        index += 1;\n                    }\n                }\n            }\n            i += 1;\n        }\n    }\n\n    ngOnInit() {\n        if (!this.sliderOptions) {\n            this.sliderOptions = {};\n        }\n        this.sliderOptions.loop = true;\n\n        this.hourRange = (this.endHour - this.startHour) * this.hourSegments;\n        if (this.dateFormatter && this.dateFormatter.formatWeekViewDayHeader) {\n            this.formatDayHeader = this.dateFormatter.formatWeekViewDayHeader;\n        } else {\n            const datePipe = new DatePipe(this.locale);\n            this.formatDayHeader = function (date: Date) {\n                return datePipe.transform(date, this.formatWeekViewDayHeader);\n            };\n        }\n\n        if (this.dateFormatter && this.dateFormatter.formatWeekViewTitle) {\n            this.formatTitle = this.dateFormatter.formatWeekViewTitle;\n        } else {\n            const datePipe = new DatePipe(this.locale);\n            this.formatTitle = function (date: Date) {\n                return datePipe.transform(date, this.formatWeekTitle);\n            };\n        }\n\n        if (this.dateFormatter && this.dateFormatter.formatWeekViewHourColumn) {\n            this.formatHourColumnLabel = this.dateFormatter.formatWeekViewHourColumn;\n        } else {\n            const datePipe = new DatePipe(this.locale);\n            this.formatHourColumnLabel = function (date: Date) {\n                return datePipe.transform(date, this.formatHourColumn);\n            };\n        }\n\n        if (this.lockSwipeToPrev) {\n            this.slider.lockSwipeToPrev(true);\n        }\n\n        if (this.lockSwipes) {\n            this.slider.lockSwipes(true);\n        }\n\n        this.refreshView();\n        this.hourColumnLabels = this.getHourColumnLabels();\n        this.inited = true;\n\n        this.currentDateChangedFromParentSubscription = this.calendarService.currentDateChangedFromParent$.subscribe(currentDate => {\n            this.refreshView();\n        });\n\n        this.eventSourceChangedSubscription = this.calendarService.eventSourceChanged$.subscribe(() => {\n            this.onDataLoaded();\n        });\n\n        this.slideChangedSubscription = this.calendarService.slideChanged$.subscribe(direction => {\n            if (direction === 1) {\n                this.slider.slideNext();\n            } else if (direction === -1) {\n                this.slider.slidePrev();\n            }\n        });\n\n        this.slideUpdatedSubscription = this.calendarService.slideUpdated$.subscribe(() => {\n            this.slider.update();\n        });\n    }\n\n    ngAfterViewInit() {\n        const title = this.getTitle();\n        this.onTitleChanged.emit(title);\n\n        if (this.scrollToHour > 0) {\n            const hourColumns = this.elm.nativeElement.querySelector('.weekview-normal-event-container').querySelectorAll('.calendar-hour-column');\n            const me = this;\n            setTimeout(() => {\n                me.initScrollPosition = hourColumns[me.scrollToHour - me.startHour].offsetTop;\n            }, 50);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (!this.inited) {\n            return;\n        }\n\n        const eventSourceChange = changes.eventSource;\n        if (eventSourceChange && eventSourceChange.currentValue) {\n            this.onDataLoaded();\n        }\n\n        const lockSwipeToPrev = changes.lockSwipeToPrev;\n        if (lockSwipeToPrev) {\n            this.slider.lockSwipeToPrev(lockSwipeToPrev.currentValue);\n        }\n\n        const lockSwipes = changes.lockSwipes;\n        if (lockSwipes) {\n            this.slider.lockSwipes(lockSwipes.currentValue);\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.currentDateChangedFromParentSubscription) {\n            this.currentDateChangedFromParentSubscription.unsubscribe();\n            this.currentDateChangedFromParentSubscription = null;\n        }\n\n        if (this.eventSourceChangedSubscription) {\n            this.eventSourceChangedSubscription.unsubscribe();\n            this.eventSourceChangedSubscription = null;\n        }\n\n        if (this.slideChangedSubscription) {\n            this.slideChangedSubscription.unsubscribe();\n            this.slideChangedSubscription = null;\n        }\n\n        if (this.slideUpdatedSubscription) {\n            this.slideUpdatedSubscription.unsubscribe();\n            this.slideUpdatedSubscription = null;\n        }\n    }\n\n    onSlideChanged() {\n        if (this.callbackOnInit) {\n            this.callbackOnInit = false;\n            return;\n        }\n\n        const currentViewIndex = this.currentViewIndex;\n        let direction = 0;\n\n        this.slider.getActiveIndex().then(currentSlideIndex => {\n            currentSlideIndex = (currentSlideIndex + 2) % 3;\n            if(isNaN(currentSlideIndex)) {\n                currentSlideIndex = currentViewIndex;\n            }\n\n            if (currentSlideIndex - currentViewIndex === 1) {\n                direction = 1;\n            } else if (currentSlideIndex === 0 && currentViewIndex === 2) {\n                direction = 1;\n                this.slider.slideTo(1, 0, false);\n            } else if (currentViewIndex - currentSlideIndex === 1) {\n                direction = -1;\n            } else if (currentSlideIndex === 2 && currentViewIndex === 0) {\n                direction = -1;\n                this.slider.slideTo(3, 0, false);\n            }\n            this.currentViewIndex = currentSlideIndex;\n            this.move(direction);\n        });\n    }\n\n    move(direction: number) {\n        if (direction === 0) {\n            return;\n        }\n        this.direction = direction;\n        const adjacent = this.calendarService.getAdjacentCalendarDate(this.mode, direction);\n        this.calendarService.setCurrentDate(adjacent);\n        this.refreshView();\n        this.direction = 0;\n    }\n\n    private getHourColumnLabels(): string[] {\n        const hourColumnLabels: string[] = [];\n        for (let hour = 0, length = this.views[0].rows.length; hour < length; hour += 1) {\n            // handle edge case for DST\n            if (hour === 0 && this.views[0].rows[hour][0].time.getHours() !== this.startHour) {\n                const time = new Date(this.views[0].rows[hour][0].time);\n                time.setDate(time.getDate() + 1);\n                time.setHours(this.startHour);\n                hourColumnLabels.push(this.formatHourColumnLabel(time));\n            } else {\n                hourColumnLabels.push(this.formatHourColumnLabel(this.views[0].rows[hour][0].time));\n            }\n        }\n        return hourColumnLabels;\n    }\n\n    getViewData(startTime: Date): IWeekView {\n        const dates = WeekViewComponent.getDates(startTime, 7);\n        for (let i = 0; i < 7; i++) {\n            dates[i].dayHeader = this.formatDayHeader(dates[i].date);\n        }\n\n        return {\n            rows: WeekViewComponent.createDateObjects(startTime, this.startHour, this.endHour, this.hourSegments),\n            dates\n        };\n    }\n\n    getRange(currentDate: Date): IRange {\n        const year = currentDate.getFullYear(),\n            month = currentDate.getMonth(),\n            date = currentDate.getDate(),\n            day = currentDate.getDay();\n        let difference = day - this.startingDayWeek;\n\n        if (difference < 0) {\n            difference += 7;\n        }\n\n        // set hour to 12 to avoid DST problem\n        const firstDayOfWeek = new Date(year, month, date - difference, 12, 0, 0),\n            endTime = new Date(year, month, date - difference + 7, 12, 0, 0);\n\n        return {\n            startTime: firstDayOfWeek,\n            endTime\n        };\n    }\n\n    onDataLoaded() {\n        const eventSource = this.eventSource,\n            len = eventSource ? eventSource.length : 0,\n            startTime = this.range.startTime,\n            endTime = this.range.endTime,\n            utcStartTime = Date.UTC(startTime.getFullYear(), startTime.getMonth(), startTime.getDate()),\n            utcEndTime = Date.UTC(endTime.getFullYear(), endTime.getMonth(), endTime.getDate()),\n            currentViewIndex = this.currentViewIndex,\n            rows = this.views[currentViewIndex].rows,\n            dates = this.views[currentViewIndex].dates,\n            oneHour = 3600000,\n            oneDay = 86400000,\n            // add allday eps\n            eps = 0.016,\n            rangeStartRowIndex = this.startHour * this.hourSegments,\n            rangeEndRowIndex = this.endHour * this.hourSegments,\n            allRows = 24 * this.hourSegments;\n        let allDayEventInRange = false,\n            normalEventInRange = false;\n\n        for (let i = 0; i < 7; i += 1) {\n            dates[i].events = [];\n            dates[i].hasEvent = false;\n        }\n\n        for (let day = 0; day < 7; day += 1) {\n            for (let hour = 0; hour < this.hourRange; hour += 1) {\n                rows[hour][day].events = [];\n            }\n        }\n        for (let i = 0; i < len; i += 1) {\n            const event = eventSource[i];\n            const eventStartTime = event.startTime;\n            const eventEndTime = event.endTime;\n\n            let eventUTCStartTime: number,\n                eventUTCEndTime: number;\n\n            if (event.allDay) {\n                eventUTCStartTime = eventStartTime.getTime();\n                eventUTCEndTime = eventEndTime.getTime();\n            } else {\n                eventUTCStartTime = Date.UTC(eventStartTime.getFullYear(), eventStartTime.getMonth(), eventStartTime.getDate());\n                eventUTCEndTime = Date.UTC(eventEndTime.getFullYear(), eventEndTime.getMonth(), eventEndTime.getDate() + 1);\n            }\n\n            if (eventUTCEndTime <= utcStartTime || eventUTCStartTime >= utcEndTime || eventStartTime >= eventEndTime) {\n                continue;\n            }\n\n            if (event.allDay) {\n                allDayEventInRange = true;\n\n                let allDayStartIndex: number;\n                if (eventUTCStartTime <= utcStartTime) {\n                    allDayStartIndex = 0;\n                } else {\n                    allDayStartIndex = Math.round((eventUTCStartTime - utcStartTime) / oneDay);\n                }\n\n                let allDayEndIndex: number;\n                if (eventUTCEndTime >= utcEndTime) {\n                    allDayEndIndex = Math.round((utcEndTime - utcStartTime) / oneDay);\n                } else {\n                    allDayEndIndex = Math.round((eventUTCEndTime - utcStartTime) / oneDay);\n                }\n\n                const displayAllDayEvent: IDisplayEvent = {\n                    event,\n                    startIndex: allDayStartIndex,\n                    endIndex: allDayEndIndex\n                };\n\n                let eventSet = dates[allDayStartIndex].events;\n                if (eventSet) {\n                    eventSet.push(displayAllDayEvent);\n                } else {\n                    eventSet = [];\n                    eventSet.push(displayAllDayEvent);\n                    dates[allDayStartIndex].events = eventSet;\n                }\n                dates[allDayStartIndex].hasEvent = true;\n            } else {\n                normalEventInRange = true;\n\n                let timeDifferenceStart: number;\n                if (eventUTCStartTime < utcStartTime) {\n                    timeDifferenceStart = 0;\n                } else {\n                    timeDifferenceStart = (eventUTCStartTime - utcStartTime) / oneHour * this.hourSegments + (eventStartTime.getHours() + eventStartTime.getMinutes() / 60) * this.hourSegments;\n                }\n\n                let timeDifferenceEnd: number;\n                if (eventUTCEndTime > utcEndTime) {\n                    timeDifferenceEnd = (utcEndTime - utcStartTime) / oneHour * this.hourSegments;\n                } else {\n                    timeDifferenceEnd = (eventUTCEndTime - oneDay - utcStartTime) / oneHour * this.hourSegments + (eventEndTime.getHours() + eventEndTime.getMinutes() / 60) * this.hourSegments;\n                }\n\n                const startIndex = Math.floor(timeDifferenceStart),\n                    endIndex = Math.ceil(timeDifferenceEnd - eps);\n                let startRowIndex = startIndex % allRows,\n                    dayIndex = Math.floor(startIndex / allRows),\n                    endOfDay = dayIndex * allRows,\n                    startOffset = 0,\n                    endOffset = 0;\n\n                if (this.hourParts !== 1) {\n                    if (startRowIndex < rangeStartRowIndex) {\n                        startOffset = 0;\n                    } else {\n                        startOffset = Math.floor((timeDifferenceStart - startIndex) * this.hourParts);\n                    }\n                }\n\n                do {\n                    endOfDay += allRows;\n                    let endRowIndex: number;\n                    if (endOfDay < endIndex) {\n                        endRowIndex = allRows;\n                    } else {\n                        if (endOfDay === endIndex) {\n                            endRowIndex = allRows;\n                        } else {\n                            endRowIndex = endIndex % allRows;\n                        }\n                        if (this.hourParts !== 1) {\n                            if (endRowIndex > rangeEndRowIndex) {\n                                endOffset = 0;\n                            } else {\n                                endOffset = Math.floor((endIndex - timeDifferenceEnd) * this.hourParts);\n                            }\n                        }\n                    }\n                    if (startRowIndex < rangeStartRowIndex) {\n                        startRowIndex = 0;\n                    } else {\n                        startRowIndex -= rangeStartRowIndex;\n                    }\n                    if (endRowIndex > rangeEndRowIndex) {\n                        endRowIndex = rangeEndRowIndex;\n                    }\n                    endRowIndex -= rangeStartRowIndex;\n\n                    if (startRowIndex < endRowIndex) {\n                        const displayEvent = {\n                            event,\n                            startIndex: startRowIndex,\n                            endIndex: endRowIndex,\n                            startOffset,\n                            endOffset\n                        };\n                        let eventSet = rows[startRowIndex][dayIndex].events;\n                        if (eventSet) {\n                            eventSet.push(displayEvent);\n                        } else {\n                            eventSet = [];\n                            eventSet.push(displayEvent);\n                            rows[startRowIndex][dayIndex].events = eventSet;\n                        }\n                        dates[dayIndex].hasEvent = true;\n                    }\n                    startRowIndex = 0;\n                    startOffset = 0;\n                    dayIndex += 1;\n                } while (endOfDay < endIndex);\n            }\n        }\n\n        if (normalEventInRange) {\n            for (let day = 0; day < 7; day += 1) {\n                let orderedEvents: IDisplayEvent[] = [];\n                for (let hour = 0; hour < this.hourRange; hour += 1) {\n                    if (rows[hour][day].events) {\n                        rows[hour][day].events.sort(WeekViewComponent.compareEventByStartOffset);\n                        orderedEvents = orderedEvents.concat(rows[hour][day].events);\n                    }\n                }\n                if (orderedEvents.length > 0) {\n                    this.placeEvents(orderedEvents);\n                }\n            }\n        }\n\n        if (allDayEventInRange) {\n            let orderedAllDayEvents: IDisplayEvent[] = [];\n            for (let day = 0; day < 7; day += 1) {\n                if (dates[day].events) {\n                    orderedAllDayEvents = orderedAllDayEvents.concat(dates[day].events);\n                }\n            }\n            if (orderedAllDayEvents.length > 0) {\n                this.placeAllDayEvents(orderedAllDayEvents);\n            }\n        }\n\n        if (this.autoSelect) {\n            let findSelected = false;\n            let selectedDate;\n            for (let r = 0; r < 7; r += 1) {\n                if (dates[r].selected) {\n                    selectedDate = dates[r];\n                    findSelected = true;\n                    break;\n                }\n            }\n\n            if (findSelected) {\n                let disabled = false;\n                if (this.markDisabled) {\n                    disabled = this.markDisabled(selectedDate.date);\n                }\n\n                this.onTimeSelected.emit({\n                    selectedTime: selectedDate.date,\n                    events: selectedDate.events.map(e => e.event),\n                    disabled\n                });\n            }\n        }\n    }\n\n    refreshView() {\n        this.range = this.getRange(this.calendarService.currentDate);\n\n        if (this.inited) {\n            const title = this.getTitle();\n            this.onTitleChanged.emit(title);\n        }\n        this.calendarService.populateAdjacentViews(this);\n        this.updateCurrentView(this.range.startTime, this.views[this.currentViewIndex]);\n        this.calendarService.rangeChanged(this);\n    }\n\n    getTitle(): string {\n        const firstDayOfWeek = new Date(this.range.startTime.getTime());\n        firstDayOfWeek.setHours(12, 0, 0, 0);\n        return this.formatTitle(firstDayOfWeek);\n    }\n\n    getHighlightClass(date: IWeekViewDateRow): string {\n        let className = '';\n\n        if (date.hasEvent) {\n            if (className) {\n                className += ' ';\n            }\n            className = 'weekview-with-event';\n        }\n\n        if (date.selected) {\n            if (className) {\n                className += ' ';\n            }\n            className += 'weekview-selected';\n        }\n\n        if (date.current) {\n            if (className) {\n                className += ' ';\n            }\n            className += 'weekview-current';\n        }\n\n        return className;\n    }\n\n    select(selectedTime: Date, events: IDisplayEvent[]) {\n        let disabled = false;\n        if (this.markDisabled) {\n            disabled = this.markDisabled(selectedTime);\n        }\n\n        this.onTimeSelected.emit({\n            selectedTime,\n            events: events.map(e => e.event),\n            disabled\n        });\n    }\n\n    placeEvents(orderedEvents: IDisplayEvent[]) {\n        this.calculatePosition(orderedEvents);\n        WeekViewComponent.calculateWidth(orderedEvents, this.hourRange, this.hourParts);\n    }\n\n    placeAllDayEvents(orderedEvents: IDisplayEvent[]) {\n        this.calculatePosition(orderedEvents);\n    }\n\n    overlap(event1: IDisplayEvent, event2: IDisplayEvent): boolean {\n        let earlyEvent = event1,\n            lateEvent = event2;\n        if (event1.startIndex > event2.startIndex || (event1.startIndex === event2.startIndex && event1.startOffset > event2.startOffset)) {\n            earlyEvent = event2;\n            lateEvent = event1;\n        }\n\n        if (earlyEvent.endIndex <= lateEvent.startIndex) {\n            return false;\n        } else {\n            return !(earlyEvent.endIndex - lateEvent.startIndex === 1 && earlyEvent.endOffset + lateEvent.startOffset >= this.hourParts);\n        }\n    }\n\n    calculatePosition(events: IDisplayEvent[]) {\n        const len = events.length,\n            isForbidden = new Array(len);\n        let maxColumn = 0;\n\n        for (let i = 0; i < len; i += 1) {\n            let col: number;\n            for (col = 0; col < maxColumn; col += 1) {\n                isForbidden[col] = false;\n            }\n            for (let j = 0; j < i; j += 1) {\n                if (this.overlap(events[i], events[j])) {\n                    isForbidden[events[j].position] = true;\n                }\n            }\n            for (col = 0; col < maxColumn; col += 1) {\n                if (!isForbidden[col]) {\n                    break;\n                }\n            }\n            if (col < maxColumn) {\n                events[i].position = col;\n            } else {\n                events[i].position = maxColumn++;\n            }\n        }\n\n        if (this.dir === 'rtl') {\n            for (let i = 0; i < len; i += 1) {\n                events[i].position = maxColumn - 1 - events[i].position;\n            }\n        }\n    }\n\n    updateCurrentView(currentViewStartDate: Date, view: IWeekView) {\n        const currentCalendarDate = this.calendarService.currentDate,\n            today = new Date(),\n            oneDay = 86400000,\n            selectedDayDifference = Math.round((Date.UTC(currentCalendarDate.getFullYear(), currentCalendarDate.getMonth(), currentCalendarDate.getDate()) - Date.UTC(currentViewStartDate.getFullYear(), currentViewStartDate.getMonth(), currentViewStartDate.getDate())) / oneDay),\n            currentDayDifference = Math.floor((Date.UTC(today.getFullYear(), today.getMonth(), today.getTime()) - Date.UTC(currentViewStartDate.getFullYear(), currentViewStartDate.getMonth(), currentViewStartDate.getDate())) / oneDay);\n\n        for (let r = 0; r < 7; r += 1) {\n            view.dates[r].selected = false;\n        }\n\n        if (selectedDayDifference >= 0 && selectedDayDifference < 7 && this.autoSelect) {\n            view.dates[selectedDayDifference].selected = true;\n        }\n\n        if (currentDayDifference >= 0 && currentDayDifference < 7) {\n            view.dates[currentDayDifference].current = true;\n        }\n    }\n\n    daySelected(viewDate: IWeekViewDateRow) {\n        const selectedDate = viewDate.date,\n            dates = this.views[this.currentViewIndex].dates,\n            currentViewStartDate = this.range.startTime,\n            oneDay = 86400000,\n            selectedDayDifference = Math.round((Date.UTC(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate()) - Date.UTC(currentViewStartDate.getFullYear(), currentViewStartDate.getMonth(), currentViewStartDate.getDate())) / oneDay);\n\n        this.calendarService.setCurrentDate(selectedDate);\n\n        for (let r = 0; r < 7; r += 1) {\n            dates[r].selected = false;\n        }\n\n        if (selectedDayDifference >= 0 && selectedDayDifference < 7) {\n            dates[selectedDayDifference].selected = true;\n        }\n\n        let disabled = false;\n        if (this.markDisabled) {\n            disabled = this.markDisabled(selectedDate);\n        }\n\n        this.onTimeSelected.emit({selectedTime: selectedDate, events: viewDate.events.map(e => e.event), disabled});\n    }\n\n    setScrollPosition(scrollPosition: number) {\n        this.initScrollPosition = scrollPosition;\n    }\n}\n","import {DatePipe} from '@angular/common';\nimport {IonSlides} from '@ionic/angular';\nimport {\n    Component,\n    OnInit,\n    OnChanges,\n    HostBinding,\n    Input,\n    Output,\n    EventEmitter,\n    SimpleChanges,\n    ViewChild,\n    ViewEncapsulation,\n    TemplateRef,\n    ElementRef,\n    AfterViewInit, OnDestroy\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\n\nimport {\n    ICalendarComponent,\n    IDayView,\n    IDayViewRow,\n    IDisplayEvent,\n    IEvent,\n    ITimeSelected,\n    IRange,\n    CalendarMode,\n    IDateFormatter\n} from './calendar';\nimport {CalendarService} from './calendar.service';\nimport {IDisplayAllDayEvent, IDayViewAllDayEventSectionTemplateContext, IDayViewNormalEventSectionTemplateContext} from './calendar';\n\n@Component({\n    selector: 'dayview',\n    template: `\n        <ion-slides #daySlider [options]=\"sliderOptions\" [dir]=\"dir\" (ionSlideDidChange)=\"onSlideChanged()\" class=\"slides-container\">\n            <ion-slide class=\"slide-container\">\n                <div class=\"dayview-allday-table\">\n                    <div class=\"dayview-allday-label\">{{allDayLabel}}</div>\n                    <div class=\"dayview-allday-content-wrapper scroll-content\">\n                        <table class=\"table table-bordered dayview-allday-content-table\">\n                            <tbody>\n                            <tr>\n                                <td class=\"calendar-cell\" [ngClass]=\"{'calendar-event-wrap':views[0].allDayEvents.length>0}\"\n                                    [ngStyle]=\"{height: 25*views[0].allDayEvents.length+'px'}\"\n                                    *ngIf=\"0===currentViewIndex\">\n                                    <ng-template [ngTemplateOutlet]=\"dayviewAllDayEventSectionTemplate\"\n                                                 [ngTemplateOutletContext]=\"{allDayEvents:views[0].allDayEvents,eventTemplate:dayviewAllDayEventTemplate}\">\n                                    </ng-template>\n                                </td>\n                                <td class=\"calendar-cell\" *ngIf=\"0!==currentViewIndex\">\n                                    <ng-template [ngTemplateOutlet]=\"dayviewInactiveAllDayEventSectionTemplate\"\n                                                 [ngTemplateOutletContext]=\"{allDayEvents:views[0].allDayEvents}\">\n                                    </ng-template>\n                                </td>\n                            </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n                <init-position-scroll *ngIf=\"0===currentViewIndex\" class=\"dayview-normal-event-container\"\n                                      [initPosition]=\"initScrollPosition\" [emitEvent]=\"preserveScrollPosition\"\n                                      (onScroll)=\"setScrollPosition($event)\">\n                    <table class=\"table table-bordered table-fixed dayview-normal-event-table\">\n                        <tbody>\n                        <tr *ngFor=\"let tm of views[0].rows; let i = index\">\n                            <td class=\"calendar-hour-column text-center\">\n                                {{hourColumnLabels[i]}}\n                            </td>\n                            <td class=\"calendar-cell\" tappable (click)=\"select(tm.time, tm.events)\">\n                                <ng-template [ngTemplateOutlet]=\"dayviewNormalEventSectionTemplate\"\n                                             [ngTemplateOutletContext]=\"{tm:tm, hourParts: hourParts, eventTemplate:dayviewNormalEventTemplate}\">\n                                </ng-template>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </init-position-scroll>\n                <init-position-scroll *ngIf=\"0!==currentViewIndex\" class=\"dayview-normal-event-container\"\n                                      [initPosition]=\"initScrollPosition\">\n                    <table class=\"table table-bordered table-fixed dayview-normal-event-table\">\n                        <tbody>\n                        <tr *ngFor=\"let tm of views[0].rows; let i = index\">\n                            <td class=\"calendar-hour-column text-center\">\n                                {{hourColumnLabels[i]}}\n                            </td>\n                            <td class=\"calendar-cell\">\n                                <ng-template [ngTemplateOutlet]=\"dayviewInactiveNormalEventSectionTemplate\"\n                                             [ngTemplateOutletContext]=\"{tm:tm, hourParts: hourParts}\">\n                                </ng-template>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </init-position-scroll>\n            </ion-slide>\n            <ion-slide class=\"slide-container\">\n                <div class=\"dayview-allday-table\">\n                    <div class=\"dayview-allday-label\">{{allDayLabel}}</div>\n                    <div class=\"dayview-allday-content-wrapper scroll-content\">\n                        <table class=\"table table-bordered dayview-allday-content-table\">\n                            <tbody>\n                            <tr>\n                                <td class=\"calendar-cell\" [ngClass]=\"{'calendar-event-wrap':views[1].allDayEvents.length>0}\"\n                                    [ngStyle]=\"{height: 25*views[1].allDayEvents.length+'px'}\"\n                                    *ngIf=\"1===currentViewIndex\">\n                                    <ng-template [ngTemplateOutlet]=\"dayviewAllDayEventSectionTemplate\"\n                                                 [ngTemplateOutletContext]=\"{allDayEvents:views[1].allDayEvents,eventTemplate:dayviewAllDayEventTemplate}\">\n                                    </ng-template>\n                                </td>\n                                <td class=\"calendar-cell\" *ngIf=\"1!==currentViewIndex\">\n                                    <ng-template [ngTemplateOutlet]=\"dayviewInactiveAllDayEventSectionTemplate\"\n                                                 [ngTemplateOutletContext]=\"{allDayEvents:views[1].allDayEvents}\">\n                                    </ng-template>\n                                </td>\n                            </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n                <init-position-scroll *ngIf=\"1===currentViewIndex\" class=\"dayview-normal-event-container\"\n                                      [initPosition]=\"initScrollPosition\" [emitEvent]=\"preserveScrollPosition\"\n                                      (onScroll)=\"setScrollPosition($event)\">\n                    <table class=\"table table-bordered table-fixed dayview-normal-event-table\">\n                        <tbody>\n                        <tr *ngFor=\"let tm of views[1].rows; let i = index\">\n                            <td class=\"calendar-hour-column text-center\">\n                                {{hourColumnLabels[i]}}\n                            </td>\n                            <td class=\"calendar-cell\" tappable (click)=\"select(tm.time, tm.events)\">\n                                <ng-template [ngTemplateOutlet]=\"dayviewNormalEventSectionTemplate\"\n                                             [ngTemplateOutletContext]=\"{tm:tm, hourParts: hourParts, eventTemplate:dayviewNormalEventTemplate}\">\n                                </ng-template>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </init-position-scroll>\n                <init-position-scroll *ngIf=\"1!==currentViewIndex\" class=\"dayview-normal-event-container\"\n                                      [initPosition]=\"initScrollPosition\">\n                    <table class=\"table table-bordered table-fixed dayview-normal-event-table\">\n                        <tbody>\n                        <tr *ngFor=\"let tm of views[1].rows; let i = index\">\n                            <td class=\"calendar-hour-column text-center\">\n                                {{hourColumnLabels[i]}}\n                            </td>\n                            <td class=\"calendar-cell\">\n                                <ng-template [ngTemplateOutlet]=\"dayviewInactiveNormalEventSectionTemplate\"\n                                             [ngTemplateOutletContext]=\"{tm:tm, hourParts: hourParts}\">\n                                </ng-template>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </init-position-scroll>\n            </ion-slide>\n            <ion-slide class=\"slide-container\">\n                <div class=\"dayview-allday-table\">\n                    <div class=\"dayview-allday-label\">{{allDayLabel}}</div>\n                    <div class=\"dayview-allday-content-wrapper scroll-content\">\n                        <table class=\"table table-bordered dayview-allday-content-table\">\n                            <tbody>\n                            <tr>\n                                <td class=\"calendar-cell\" [ngClass]=\"{'calendar-event-wrap':views[2].allDayEvents.length>0}\"\n                                    [ngStyle]=\"{height: 25*views[2].allDayEvents.length+'px'}\"\n                                    *ngIf=\"2===currentViewIndex\">\n                                    <ng-template [ngTemplateOutlet]=\"dayviewAllDayEventSectionTemplate\"\n                                                 [ngTemplateOutletContext]=\"{allDayEvents:views[2].allDayEvents,eventTemplate:dayviewAllDayEventTemplate}\">\n                                    </ng-template>\n                                </td>\n                                <td class=\"calendar-cell\" *ngIf=\"2!==currentViewIndex\">\n                                    <ng-template [ngTemplateOutlet]=\"dayviewInactiveAllDayEventSectionTemplate\"\n                                                 [ngTemplateOutletContext]=\"{allDayEvents:views[2].allDayEvents}\">\n                                    </ng-template>\n                                </td>\n                            </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n                <init-position-scroll *ngIf=\"2===currentViewIndex\" class=\"dayview-normal-event-container\"\n                                      [initPosition]=\"initScrollPosition\" [emitEvent]=\"preserveScrollPosition\"\n                                      (onScroll)=\"setScrollPosition($event)\">\n                    <table class=\"table table-bordered table-fixed dayview-normal-event-table\">\n                        <tbody>\n                        <tr *ngFor=\"let tm of views[2].rows; let i = index\">\n                            <td class=\"calendar-hour-column text-center\">\n                                {{hourColumnLabels[i]}}\n                            </td>\n                            <td class=\"calendar-cell\" tappable (click)=\"select(tm.time, tm.events)\">\n                                <ng-template [ngTemplateOutlet]=\"dayviewNormalEventSectionTemplate\"\n                                             [ngTemplateOutletContext]=\"{tm:tm, hourParts: hourParts, eventTemplate:dayviewNormalEventTemplate}\">\n                                </ng-template>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </init-position-scroll>\n                <init-position-scroll *ngIf=\"2!==currentViewIndex\" class=\"dayview-normal-event-container\"\n                                      [initPosition]=\"initScrollPosition\">\n                    <table class=\"table table-bordered table-fixed dayview-normal-event-table\">\n                        <tbody>\n                        <tr *ngFor=\"let tm of views[2].rows; let i = index\">\n                            <td class=\"calendar-hour-column text-center\">\n                                {{hourColumnLabels[i]}}\n                            </td>\n                            <td class=\"calendar-cell\">\n                                <ng-template [ngTemplateOutlet]=\"dayviewInactiveNormalEventSectionTemplate\"\n                                             [ngTemplateOutletContext]=\"{tm:tm, hourParts: hourParts}\">\n                                </ng-template>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </init-position-scroll>\n            </ion-slide>\n        </ion-slides>\n    `,\n    styles: [`\n        .table-fixed {\n            table-layout: fixed;\n        }\n\n        .table {\n            width: 100%;\n            max-width: 100%;\n            background-color: transparent;\n        }\n\n        .table > thead > tr > th, .table > tbody > tr > th, .table > tfoot > tr > th, .table > thead > tr > td,\n        .table > tbody > tr > td, .table > tfoot > tr > td {\n            padding: 8px;\n            line-height: 20px;\n            vertical-align: top;\n        }\n\n        .table > thead > tr > th {\n            vertical-align: bottom;\n            border-bottom: 2px solid #ddd;\n        }\n\n        .table > thead:first-child > tr:first-child > th, .table > thead:first-child > tr:first-child > td {\n            border-top: 0\n        }\n\n        .table > tbody + tbody {\n            border-top: 2px solid #ddd;\n        }\n\n        .table-bordered {\n            border: 1px solid #ddd;\n        }\n\n        .table-bordered > thead > tr > th, .table-bordered > tbody > tr > th, .table-bordered > tfoot > tr > th,\n        .table-bordered > thead > tr > td, .table-bordered > tbody > tr > td, .table-bordered > tfoot > tr > td {\n            border: 1px solid #ddd;\n        }\n\n        .table-bordered > thead > tr > th, .table-bordered > thead > tr > td {\n            border-bottom-width: 2px;\n        }\n\n        .table-striped > tbody > tr:nth-child(odd) > td, .table-striped > tbody > tr:nth-child(odd) > th {\n            background-color: #f9f9f9\n        }\n\n        .calendar-hour-column {\n            width: 50px;\n            white-space: nowrap;\n        }\n\n        .calendar-event-wrap {\n            position: relative;\n            width: 100%;\n            height: 100%;\n        }\n\n        .calendar-event {\n            position: absolute;\n            padding: 2px;\n            cursor: pointer;\n            z-index: 10000;\n        }\n\n        .slides-container {\n            height: 100%;\n        }\n\n        .slide-container {\n            display: block;\n        }\n\n        .calendar-cell {\n            padding: 0 !important;\n            height: 37px;\n        }\n\n        .dayview-allday-label {\n            float: left;\n            height: 100%;\n            line-height: 50px;\n            text-align: center;\n            width: 50px;\n            border-left: 1px solid #ddd;\n        }\n\n        [dir=\"rtl\"] .dayview-allday-label {\n            border-right: 1px solid #ddd;\n            float: right;\n        }\n\n        .dayview-allday-content-wrapper {\n            margin-left: 50px;\n            overflow: hidden;\n            height: 51px;\n        }\n\n        [dir=\"rtl\"] .dayview-allday-content-wrapper {\n            margin-left: 0;\n            margin-right: 50px;\n        }\n\n        .dayview-allday-content-table {\n            min-height: 50px;\n        }\n\n        .dayview-allday-content-table td {\n            border-left: 1px solid #ddd;\n            border-right: 1px solid #ddd;\n        }\n\n        .dayview-allday-table {\n            height: 50px;\n            position: relative;\n            border-bottom: 1px solid #ddd;\n            font-size: 14px;\n        }\n\n        .dayview-normal-event-container {\n            margin-top: 50px;\n            overflow: hidden;\n            left: 0;\n            right: 0;\n            top: 0;\n            bottom: 0;\n            position: absolute;\n            font-size: 14px;\n        }\n\n        .scroll-content {\n            overflow-y: auto;\n            overflow-x: hidden;\n        }\n\n        ::-webkit-scrollbar,\n        *::-webkit-scrollbar {\n            display: none;\n        }\n\n        .table > tbody > tr > td.calendar-hour-column {\n            padding-left: 0;\n            padding-right: 0;\n            vertical-align: middle;\n        }\n\n        @media (max-width: 750px) {\n            .dayview-allday-label, .calendar-hour-column {\n                width: 31px;\n                font-size: 12px;\n            }\n\n            .dayview-allday-label {\n                padding-top: 4px;\n            }\n\n            .table > tbody > tr > td.calendar-hour-column {\n                padding-left: 0;\n                padding-right: 0;\n                vertical-align: middle;\n                line-height: 12px;\n            }\n\n            .dayview-allday-label {\n                line-height: 20px;\n            }\n\n            .dayview-allday-content-wrapper {\n                margin-left: 31px;\n            }\n\n            [dir=\"rtl\"] .dayview-allday-content-wrapper {\n                margin-left: 0;\n                margin-right: 31px;\n            }\n        }\n    `],\n    encapsulation: ViewEncapsulation.None\n})\nexport class DayViewComponent implements ICalendarComponent, OnInit, OnChanges, OnDestroy, AfterViewInit {\n\n    constructor(private calendarService: CalendarService, private elm: ElementRef) {\n    }\n\n    @ViewChild('daySlider', {static: true}) slider: IonSlides;\n    @HostBinding('class.dayview') class = true;\n\n    @Input() dayviewAllDayEventTemplate: TemplateRef<IDisplayAllDayEvent>;\n    @Input() dayviewNormalEventTemplate: TemplateRef<IDisplayEvent>;\n    @Input() dayviewAllDayEventSectionTemplate: TemplateRef<IDayViewAllDayEventSectionTemplateContext>;\n    @Input() dayviewNormalEventSectionTemplate: TemplateRef<IDayViewNormalEventSectionTemplateContext>;\n    @Input() dayviewInactiveAllDayEventSectionTemplate: TemplateRef<IDayViewAllDayEventSectionTemplateContext>;\n    @Input() dayviewInactiveNormalEventSectionTemplate: TemplateRef<IDayViewNormalEventSectionTemplateContext>;\n\n    @Input() formatHourColumn: string;\n    @Input() formatDayTitle: string;\n    @Input() allDayLabel: string;\n    @Input() hourParts: number;\n    @Input() eventSource: IEvent[];\n    @Input() markDisabled: (date: Date) => boolean;\n    @Input() locale: string;\n    @Input() dateFormatter: IDateFormatter;\n    @Input() dir = '';\n    @Input() scrollToHour = 0;\n    @Input() preserveScrollPosition: boolean;\n    @Input() lockSwipeToPrev: boolean;\n    @Input() lockSwipes: boolean;\n    @Input() startHour: number;\n    @Input() endHour: number;\n    @Input() sliderOptions: any;\n    @Input() hourSegments: number;\n\n    @Output() onRangeChanged = new EventEmitter<IRange>();\n    @Output() onEventSelected = new EventEmitter<IEvent>();\n    @Output() onTimeSelected = new EventEmitter<ITimeSelected>();\n    @Output() onTitleChanged = new EventEmitter<string>(true);\n\n    public views: IDayView[] = [];\n    public currentViewIndex = 0;\n    public direction = 0;\n    public mode: CalendarMode = 'day';\n    public range: IRange;\n\n    private inited = false;\n    private callbackOnInit = true;\n    private currentDateChangedFromParentSubscription: Subscription;\n    private eventSourceChangedSubscription: Subscription;\n    private slideChangedSubscription: Subscription;\n    private slideUpdatedSubscription: Subscription;\n\n    public hourColumnLabels: string[];\n    public initScrollPosition: number;\n    private formatTitle: (date: Date) => string;\n    private formatHourColumnLabel: (date: Date) => string;\n    private hourRange: number;\n\n    static createDateObjects(startTime: Date, startHour: number, endHour: number, timeInterval: number): IDayViewRow[] {\n        const rows: IDayViewRow[] = [],\n            currentHour = 0,\n            currentDate = startTime.getDate();\n        let time: Date,\n            hourStep,\n            minStep;\n\n        if (timeInterval < 1) {\n            hourStep = Math.floor(1 / timeInterval);\n            minStep = 60;\n        } else {\n            hourStep = 1;\n            minStep = Math.floor(60 / timeInterval);\n        }\n\n        for (let hour = startHour; hour < endHour; hour += hourStep) {\n            for (let interval = 0; interval < 60; interval += minStep) {\n                time = new Date(startTime.getTime());\n                time.setHours(currentHour + hour, interval);\n                time.setDate(currentDate);\n                rows.push({\n                    time,\n                    events: []\n                });\n            }\n        }\n        return rows;\n    }\n\n    private static compareEventByStartOffset(eventA: IDisplayEvent, eventB: IDisplayEvent) {\n        return eventA.startOffset - eventB.startOffset;\n    }\n\n    private static calculateWidth(orderedEvents: IDisplayEvent[], size: number, hourParts: number) {\n        const totalSize = size * hourParts,\n            cells: { calculated: boolean; events: IDisplayEvent[]; }[] = new Array(totalSize);\n\n        // sort by position in descending order, the right most columns should be calculated first\n        orderedEvents.sort((eventA, eventB) => {\n            return eventB.position - eventA.position;\n        });\n        for (let i = 0; i < totalSize; i += 1) {\n            cells[i] = {\n                calculated: false,\n                events: []\n            };\n        }\n        const len = orderedEvents.length;\n        for (let i = 0; i < len; i += 1) {\n            const event = orderedEvents[i];\n            let index = event.startIndex * hourParts + event.startOffset;\n            while (index < event.endIndex * hourParts - event.endOffset) {\n                cells[index].events.push(event);\n                index += 1;\n            }\n        }\n\n        let i = 0;\n        while (i < len) {\n            let event = orderedEvents[i];\n            if (!event.overlapNumber) {\n                const overlapNumber = event.position + 1;\n                event.overlapNumber = overlapNumber;\n                const eventQueue = [event];\n                while (event = eventQueue.shift()) {\n                    let index = event.startIndex * hourParts + event.startOffset;\n                    while (index < event.endIndex * hourParts - event.endOffset) {\n                        if (!cells[index].calculated) {\n                            cells[index].calculated = true;\n                            if (cells[index].events) {\n                                const eventCountInCell = cells[index].events.length;\n                                for (let j = 0; j < eventCountInCell; j += 1) {\n                                    const currentEventInCell = cells[index].events[j];\n                                    if (!currentEventInCell.overlapNumber) {\n                                        currentEventInCell.overlapNumber = overlapNumber;\n                                        eventQueue.push(currentEventInCell);\n                                    }\n                                }\n                            }\n                        }\n                        index += 1;\n                    }\n                }\n            }\n            i += 1;\n        }\n    }\n\n    ngOnInit() {\n        if (!this.sliderOptions) {\n            this.sliderOptions = {};\n        }\n        this.sliderOptions.loop = true;\n\n        this.hourRange = (this.endHour - this.startHour) * this.hourSegments;\n        if (this.dateFormatter && this.dateFormatter.formatDayViewTitle) {\n            this.formatTitle = this.dateFormatter.formatDayViewTitle;\n        } else {\n            const datePipe = new DatePipe(this.locale);\n            this.formatTitle = function(date: Date) {\n                return datePipe.transform(date, this.formatDayTitle);\n            };\n        }\n\n        if (this.dateFormatter && this.dateFormatter.formatDayViewHourColumn) {\n            this.formatHourColumnLabel = this.dateFormatter.formatDayViewHourColumn;\n        } else {\n            const datePipe = new DatePipe(this.locale);\n            this.formatHourColumnLabel = function(date: Date) {\n                return datePipe.transform(date, this.formatHourColumn);\n            };\n        }\n\n        if (this.lockSwipeToPrev) {\n            this.slider.lockSwipeToPrev(true);\n        }\n\n        if (this.lockSwipes) {\n            this.slider.lockSwipes(true);\n        }\n\n        this.refreshView();\n        this.hourColumnLabels = this.getHourColumnLabels();\n\n        this.inited = true;\n\n        this.currentDateChangedFromParentSubscription = this.calendarService.currentDateChangedFromParent$.subscribe(currentDate => {\n            this.refreshView();\n        });\n\n        this.eventSourceChangedSubscription = this.calendarService.eventSourceChanged$.subscribe(() => {\n            this.onDataLoaded();\n        });\n\n        this.slideChangedSubscription = this.calendarService.slideChanged$.subscribe(direction => {\n            if (direction === 1) {\n                this.slider.slideNext();\n            } else if (direction === -1) {\n                this.slider.slidePrev();\n            }\n        });\n\n        this.slideUpdatedSubscription = this.calendarService.slideUpdated$.subscribe(() => {\n            this.slider.update();\n        });\n    }\n\n    ngAfterViewInit() {\n        const title = this.getTitle();\n        this.onTitleChanged.emit(title);\n\n        if (this.scrollToHour > 0) {\n            const hourColumns = this.elm.nativeElement.querySelector('.dayview-normal-event-container').querySelectorAll('.calendar-hour-column');\n            const me = this;\n            setTimeout(() => {\n                me.initScrollPosition = hourColumns[me.scrollToHour - me.startHour].offsetTop;\n            }, 50);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (!this.inited) {\n            return;\n        }\n\n        const eventSourceChange = changes.eventSource;\n        if (eventSourceChange && eventSourceChange.currentValue) {\n            this.onDataLoaded();\n        }\n\n        const lockSwipeToPrev = changes.lockSwipeToPrev;\n        if (lockSwipeToPrev) {\n            this.slider.lockSwipeToPrev(lockSwipeToPrev.currentValue);\n        }\n\n        const lockSwipes = changes.lockSwipes;\n        if (lockSwipes) {\n            this.slider.lockSwipes(lockSwipes.currentValue);\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.currentDateChangedFromParentSubscription) {\n            this.currentDateChangedFromParentSubscription.unsubscribe();\n            this.currentDateChangedFromParentSubscription = null;\n        }\n\n        if (this.eventSourceChangedSubscription) {\n            this.eventSourceChangedSubscription.unsubscribe();\n            this.eventSourceChangedSubscription = null;\n        }\n\n        if (this.slideChangedSubscription) {\n            this.slideChangedSubscription.unsubscribe();\n            this.slideChangedSubscription = null;\n        }\n\n        if (this.slideUpdatedSubscription) {\n            this.slideUpdatedSubscription.unsubscribe();\n            this.slideUpdatedSubscription = null;\n        }\n    }\n\n    onSlideChanged() {\n        if (this.callbackOnInit) {\n            this.callbackOnInit = false;\n            return;\n        }\n\n        let direction = 0;\n        const currentViewIndex = this.currentViewIndex;\n\n        this.slider.getActiveIndex().then((currentSlideIndex) => {\n            currentSlideIndex = (currentSlideIndex + 2) % 3;\n            if(isNaN(currentSlideIndex)) {\n                currentSlideIndex = currentViewIndex;\n            }\n\n            if (currentSlideIndex - currentViewIndex === 1) {\n                direction = 1;\n            } else if (currentSlideIndex === 0 && currentViewIndex === 2) {\n                direction = 1;\n                this.slider.slideTo(1, 0, false);\n            } else if (currentViewIndex - currentSlideIndex === 1) {\n                direction = -1;\n            } else if (currentSlideIndex === 2 && currentViewIndex === 0) {\n                direction = -1;\n                this.slider.slideTo(3, 0, false);\n            }\n            this.currentViewIndex = currentSlideIndex;\n            this.move(direction);\n        });\n    }\n\n    move(direction: number) {\n        if (direction === 0) {\n            return;\n        }\n\n        this.direction = direction;\n        const adjacentDate = this.calendarService.getAdjacentCalendarDate(this.mode, direction);\n        this.calendarService.setCurrentDate(adjacentDate);\n        this.refreshView();\n        this.direction = 0;\n    }\n\n    private getHourColumnLabels(): string[] {\n        const hourColumnLabels: string[] = [];\n        for (let hour = 0, length = this.views[0].rows.length; hour < length; hour += 1) {\n            // handle edge case for DST\n            if (hour === 0 && this.views[0].rows[hour].time.getHours() !== this.startHour) {\n                const time = new Date(this.views[0].rows[hour].time);\n                time.setDate(time.getDate() + 1);\n                time.setHours(this.startHour);\n                hourColumnLabels.push(this.formatHourColumnLabel(time));\n            } else {\n                hourColumnLabels.push(this.formatHourColumnLabel(this.views[0].rows[hour].time));\n            }\n        }\n        return hourColumnLabels;\n    }\n\n    getViewData(startTime: Date): IDayView {\n        return {\n            rows: DayViewComponent.createDateObjects(startTime, this.startHour, this.endHour, this.hourSegments),\n            allDayEvents: []\n        };\n    }\n\n    getRange(currentDate: Date): IRange {\n        const year = currentDate.getFullYear(),\n            month = currentDate.getMonth(),\n            date = currentDate.getDate(),\n            startTime = new Date(year, month, date, 12, 0, 0),\n            endTime = new Date(year, month, date + 1, 12, 0, 0);\n\n        return {\n            startTime,\n            endTime\n        };\n    }\n\n    onDataLoaded() {\n        const eventSource = this.eventSource,\n            len = eventSource ? eventSource.length : 0,\n            startTime = this.range.startTime,\n            endTime = this.range.endTime,\n            utcStartTime = Date.UTC(startTime.getFullYear(), startTime.getMonth(), startTime.getDate()),\n            utcEndTime = Date.UTC(endTime.getFullYear(), endTime.getMonth(), endTime.getDate()),\n            currentViewIndex = this.currentViewIndex,\n            rows = this.views[currentViewIndex].rows,\n            allDayEvents: IDisplayAllDayEvent[] = this.views[currentViewIndex].allDayEvents = [],\n            oneHour = 3600000,\n            eps = 0.016,\n            rangeStartRowIndex = this.startHour * this.hourSegments,\n            rangeEndRowIndex = this.endHour * this.hourSegments;\n        let normalEventInRange = false;\n\n        for (let hour = 0; hour < this.hourRange; hour += 1) {\n            rows[hour].events = [];\n        }\n\n        for (let i = 0; i < len; i += 1) {\n            const event = eventSource[i];\n            const eventStartTime = event.startTime;\n            const eventEndTime = event.endTime;\n            let eventUTCStartTime: number,\n                eventUTCEndTime: number;\n\n            if (event.allDay) {\n                eventUTCStartTime = eventStartTime.getTime();\n                eventUTCEndTime = eventEndTime.getTime();\n            } else {\n                eventUTCStartTime = Date.UTC(eventStartTime.getFullYear(), eventStartTime.getMonth(), eventStartTime.getDate());\n                eventUTCEndTime = Date.UTC(eventEndTime.getFullYear(), eventEndTime.getMonth(), eventEndTime.getDate() + 1);\n            }\n\n            if (eventUTCEndTime <= utcStartTime || eventUTCStartTime >= utcEndTime || eventStartTime >= eventEndTime) {\n                continue;\n            }\n\n            if (event.allDay) {\n                allDayEvents.push({\n                    event\n                });\n            } else {\n                normalEventInRange = true;\n\n                let timeDifferenceStart: number;\n                if (eventUTCStartTime < utcStartTime) {\n                    timeDifferenceStart = 0;\n                } else {\n                    timeDifferenceStart = (eventStartTime.getHours() + eventStartTime.getMinutes() / 60) * this.hourSegments;\n                }\n\n                let timeDifferenceEnd: number;\n                if (eventUTCEndTime > utcEndTime) {\n                    timeDifferenceEnd = (utcEndTime - utcStartTime) / oneHour * this.hourSegments;\n                } else {\n                    timeDifferenceEnd = (eventEndTime.getHours() + eventEndTime.getMinutes() / 60) * this.hourSegments;\n                }\n\n                let startIndex = Math.floor(timeDifferenceStart);\n                let endIndex = Math.ceil(timeDifferenceEnd - eps);\n                let startOffset = 0;\n                let endOffset = 0;\n                if (this.hourParts !== 1) {\n                    if (startIndex < rangeStartRowIndex) {\n                        startOffset = 0;\n                    } else {\n                        startOffset = Math.floor((timeDifferenceStart - startIndex) * this.hourParts);\n                    }\n                    if (endIndex > rangeEndRowIndex) {\n                        endOffset = 0;\n                    } else {\n                        endOffset = Math.floor((endIndex - timeDifferenceEnd) * this.hourParts);\n                    }\n                }\n\n                if (startIndex < rangeStartRowIndex) {\n                    startIndex = 0;\n                } else {\n                    startIndex -= rangeStartRowIndex;\n                }\n                if (endIndex > rangeEndRowIndex) {\n                    endIndex = rangeEndRowIndex;\n                }\n                endIndex -= rangeStartRowIndex;\n\n                if (startIndex < endIndex) {\n                    const displayEvent = {\n                        event,\n                        startIndex,\n                        endIndex,\n                        startOffset,\n                        endOffset\n                    };\n\n                    let eventSet = rows[startIndex].events;\n                    if (eventSet) {\n                        eventSet.push(displayEvent);\n                    } else {\n                        eventSet = [];\n                        eventSet.push(displayEvent);\n                        rows[startIndex].events = eventSet;\n                    }\n                }\n            }\n        }\n\n        if (normalEventInRange) {\n            let orderedEvents: IDisplayEvent[] = [];\n            for (let hour = 0; hour < this.hourRange; hour += 1) {\n                if (rows[hour].events) {\n                    rows[hour].events.sort(DayViewComponent.compareEventByStartOffset);\n\n                    orderedEvents = orderedEvents.concat(rows[hour].events);\n                }\n            }\n            if (orderedEvents.length > 0) {\n                this.placeEvents(orderedEvents);\n            }\n        }\n    }\n\n    refreshView() {\n        this.range = this.getRange(this.calendarService.currentDate);\n        if (this.inited) {\n            const title = this.getTitle();\n            this.onTitleChanged.emit(title);\n        }\n\n        this.calendarService.populateAdjacentViews(this);\n        this.calendarService.rangeChanged(this);\n    }\n\n    getTitle(): string {\n        const startingDate = new Date(this.range.startTime.getTime());\n        startingDate.setHours(12, 0, 0, 0);\n        return this.formatTitle(startingDate);\n    }\n\n    select(selectedTime: Date, events: IDisplayEvent[]) {\n        let disabled = false;\n        if (this.markDisabled) {\n            disabled = this.markDisabled(selectedTime);\n        }\n\n        this.onTimeSelected.emit({\n            selectedTime,\n            events: events.map(e => e.event),\n            disabled\n        });\n    }\n\n    placeEvents(orderedEvents: IDisplayEvent[]) {\n        this.calculatePosition(orderedEvents);\n        DayViewComponent.calculateWidth(orderedEvents, this.hourRange, this.hourParts);\n    }\n\n    placeAllDayEvents(orderedEvents: IDisplayEvent[]) {\n        this.calculatePosition(orderedEvents);\n    }\n\n    overlap(event1: IDisplayEvent, event2: IDisplayEvent): boolean {\n        let earlyEvent = event1,\n            lateEvent = event2;\n        if (event1.startIndex > event2.startIndex || (event1.startIndex === event2.startIndex && event1.startOffset > event2.startOffset)) {\n            earlyEvent = event2;\n            lateEvent = event1;\n        }\n\n        if (earlyEvent.endIndex <= lateEvent.startIndex) {\n            return false;\n        } else {\n            return !(earlyEvent.endIndex - lateEvent.startIndex === 1 && earlyEvent.endOffset + lateEvent.startOffset >= this.hourParts);\n        }\n    }\n\n    calculatePosition(events: IDisplayEvent[]) {\n        const len = events.length,\n            isForbidden: boolean[] = new Array(len);\n        let maxColumn = 0,\n            col: number;\n\n\n        for (let i = 0; i < len; i += 1) {\n            for (col = 0; col < maxColumn; col += 1) {\n                isForbidden[col] = false;\n            }\n            for (let j = 0; j < i; j += 1) {\n                if (this.overlap(events[i], events[j])) {\n                    isForbidden[events[j].position] = true;\n                }\n            }\n            for (col = 0; col < maxColumn; col += 1) {\n                if (!isForbidden[col]) {\n                    break;\n                }\n            }\n            if (col < maxColumn) {\n                events[i].position = col;\n            } else {\n                events[i].position = maxColumn++;\n            }\n        }\n\n        if (this.dir === 'rtl') {\n            for (let i = 0; i < len; i += 1) {\n                events[i].position = maxColumn - 1 - events[i].position;\n            }\n        }\n    }\n\n    eventSelected(event: IEvent) {\n        this.onEventSelected.emit(event);\n    }\n\n    setScrollPosition(scrollPosition: number) {\n        this.initScrollPosition = scrollPosition;\n    }\n}\n","import {\n    Component,\n    Input,\n    Output,\n    EventEmitter,\n    ElementRef,\n    SimpleChanges,\n    OnChanges,\n    AfterViewInit,\n    OnDestroy,\n    ViewEncapsulation\n} from '@angular/core';\n\n@Component({\n    selector: 'init-position-scroll',\n    template: `\n        <div class=\"scroll-content\" style=\"height:100%\">\n            <ng-content></ng-content>\n        </div>\n    `,\n    styles: [`\n        .scroll-content {\n            overflow-y: auto;\n            overflow-x: hidden;\n        }        \n    `],\n    encapsulation: ViewEncapsulation.None\n})\nexport class initPositionScrollComponent implements OnChanges, AfterViewInit, OnDestroy {\n    @Input() initPosition:number;\n    @Input() emitEvent:boolean;\n    @Output() onScroll = new EventEmitter<number>();\n\n    private element:ElementRef;\n    private scrollContent:HTMLElement;\n    private handler:()=>void;\n    private listenerAttached:boolean = false;\n\n    constructor(el:ElementRef) {\n        this.element = el;\n    }\n\n    ngOnChanges(changes:SimpleChanges) {\n        let initPosition = changes['initPosition'];\n        if (initPosition && initPosition.currentValue !== undefined && this.scrollContent) {\n            const me =this;\n            setTimeout(function() {\n                me.scrollContent.scrollTop = initPosition.currentValue;\n            }, 0);\n        }\n    }\n\n    ngAfterViewInit() {\n        const scrollContent = this.scrollContent = this.element.nativeElement.querySelector('.scroll-content');\n        if (this.initPosition !== undefined) {\n            scrollContent.scrollTop = this.initPosition;\n        }\n\n        if (this.emitEvent && !this.listenerAttached) {\n            let onScroll = this.onScroll;\n            this.handler = function () {\n                onScroll.emit(scrollContent.scrollTop);\n            };\n            this.listenerAttached = true;\n            scrollContent.addEventListener('scroll', this.handler);\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.listenerAttached) {\n            this.scrollContent.removeEventListener('scroll', this.handler);\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\nimport { MonthViewComponent } from './monthview';\nimport { WeekViewComponent } from './weekview';\nimport { DayViewComponent } from './dayview';\nimport { CalendarComponent } from './calendar';\nimport { initPositionScrollComponent } from './init-position-scroll';\n\n@NgModule({\n    declarations: [\n        MonthViewComponent, WeekViewComponent, DayViewComponent, CalendarComponent, initPositionScrollComponent\n    ],\n    imports: [IonicModule, CommonModule],\n    exports: [CalendarComponent]\n})\nexport class NgCalendarModule {}\n"]}