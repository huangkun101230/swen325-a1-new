{"version":3,"sources":["webpack:///src/app/pages/event-detail/event-detail.page.html","webpack:///src/app/pages/event-detail/event-detail-routing.module.ts","webpack:///src/app/pages/event-detail/event-detail.module.ts","webpack:///src/app/pages/event-detail/event-detail.page.scss","webpack:///src/app/pages/event-detail/event-detail.page.ts"],"names":["routes","path","component","EventDetailPageRoutingModule","imports","forChild","exports","EventDetailPageModule","declarations","EventDetailPage","eventService","route","platform","router","alertCtrl","toastController","locale","currentEvent","courseName","eventName","startTime","Date","toISOString","endTime","allDay","collapseCard","minDate","ready","then","updateDetail","self","eventId","snapshot","paramMap","get","getEventDetail","eventSnapshot","data","id","formatTime","fillCardWithRawData","time","ftime","modifyEvent","setFirstLetterToUppercase","presentToast","error","create","header","message","buttons","text","role","cssClass","handler","blah","console","log","removeEvent","navigateByUrl","alert","present","string","charAt","toUpperCase","slice","msg","status","duration","color","toast","selector","template"],"mappings":"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","file":"event-detail-event-detail-module-es5.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button defaultHref=\\\"/tabs/tab2\\\"></ion-back-button>\\n    </ion-buttons>\\n\\n    <ion-title>Event Detail</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content padding>\\n  <ion-card>\\n    <div  tappable (click)=\\\"collapseCard = !collapseCard\\\">\\n      <ion-card-header>\\n        <ion-card-title>{{ currentEvent?.courseName }}</ion-card-title>\\n        <h2><strong>{{ currentEvent?.eventName }}</strong></h2>\\n      </ion-card-header>\\n      <ion-card-content>\\n        <p>Start Date: <strong>{{currentEvent?.startTime}}</strong></p>\\n        <p>Due Date: <strong>{{currentEvent?.endTime}}</strong></p>\\n      </ion-card-content>\\n    </div>\\n    <ion-card-content *ngIf=\\\"!collapseCard\\\">\\n      <ion-item>\\n        <ion-input type=\\\"text\\\" placeholder=\\\"Course Code\\\" [(ngModel)]=\\\"courseName\\\"\\n          (ngModelChange)=\\\"courseName=$event.toUpperCase()\\\"></ion-input>\\n      </ion-item>\\n      <ion-item>\\n        <ion-input class=\\\"capitalize\\\" type=\\\"text\\\" placeholder=\\\"Assignment Title\\\" [(ngModel)]=\\\"eventName\\\"></ion-input>\\n      </ion-item>\\n      <ion-item>\\n        <ion-label>Start</ion-label>\\n        <ion-datetime displayFormat=\\\"DD/MM/YYYY HH:mm\\\" pickerFormat=\\\"D MMM:HH:mm\\\" [(ngModel)]=\\\"startTime\\\"\\n          [min]=\\\"minDate\\\">\\n        </ion-datetime>\\n      </ion-item>\\n      <ion-item>\\n        <ion-label>End</ion-label>\\n        <ion-datetime displayFormat=\\\"DD/MM/YYYY HH:mm\\\" pickerFormat=\\\"D MMM:HH:mm\\\" [(ngModel)]=\\\"endTime\\\" [min]=\\\"minDate\\\">\\n        </ion-datetime>\\n      </ion-item>\\n      <ion-item>\\n        <ion-label>All Day?</ion-label>\\n        <ion-checkbox [(ngModel)]=\\\"allDay\\\"></ion-checkbox>\\n      </ion-item>\\n      <ion-button fill=\\\"outline\\\" expand=\\\"block\\\" (click)=\\\"modify(courseName, eventName, startTime, endTime, allDay)\\\">\\n        Modify Event </ion-button>\\n    </ion-card-content>\\n  </ion-card>\\n\\n  <ion-row text-right>\\n    <ion-col size=\\\"12\\\">\\n      <ion-button shape=\\\"round\\\" expand=\\\"block\\\" color=\\\"danger\\\" (click)=\\\"remove()\\\">Remove</ion-button>\\n    </ion-col>\\n  </ion-row>\\n</ion-content>\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { EventDetailPage } from './event-detail.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: EventDetailPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class EventDetailPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { EventDetailPageRoutingModule } from './event-detail-routing.module';\n\nimport { EventDetailPage } from './event-detail.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    EventDetailPageRoutingModule\n  ],\n  declarations: [EventDetailPage]\n})\nexport class EventDetailPageModule {}\n","export default \".capitalize {\\n  text-transform: capitalize;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvZXZlbnQtZGV0YWlsL2V2ZW50LWRldGFpbC5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSwwQkFBQTtBQUNKIiwiZmlsZSI6InNyYy9hcHAvcGFnZXMvZXZlbnQtZGV0YWlsL2V2ZW50LWRldGFpbC5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuY2FwaXRhbGl6ZSB7XG4gICAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7XG4gIH1cbiAgIl19 */\";","import { Component, OnInit, LOCALE_ID, Inject } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { EventService } from \"./../../services/user/event.service\";\nimport { Platform, AlertController, ToastController } from \"@ionic/angular\";\nimport { formatDate } from \"@angular/common\";\n\n@Component({\n  selector: \"app-event-detail\",\n  templateUrl: \"./event-detail.page.html\",\n  styleUrls: [\"./event-detail.page.scss\"],\n})\nexport class EventDetailPage implements OnInit {\n  public currentEvent: any = {};\n  courseName: string = \"\";\n  eventName: string = \"\";\n  startTime = new Date().toISOString();\n  endTime = new Date().toISOString();\n  allDay: boolean = false;\n  public collapseCard = true;\n\n  //can only add new event after today\n  minDate = new Date().toISOString();\n\n  constructor(\n    private eventService: EventService,\n    private route: ActivatedRoute,\n    private platform: Platform,\n    private router: Router,\n    private alertCtrl: AlertController,\n    public toastController: ToastController,\n    @Inject(LOCALE_ID) private locale: string\n  ) {}\n\n  ngOnInit() {\n    this.platform.ready().then(() => {\n      this.updateDetail();\n    });\n  }\n\n  updateDetail() {\n    let self = this;\n    const eventId: string = this.route.snapshot.paramMap.get(\"id\");\n    this.eventService\n      .getEventDetail(eventId)\n      .get()\n      .then((eventSnapshot) => {\n        this.currentEvent = eventSnapshot.data();\n        this.currentEvent.id = eventSnapshot.id;\n        this.currentEvent.startTime = this.formatTime(\n          this.currentEvent.startTime\n        );\n        this.currentEvent.endTime = this.formatTime(this.currentEvent.endTime);\n        self.fillCardWithRawData();\n      });\n  }\n\n  fillCardWithRawData() {\n    this.courseName = this.currentEvent.courseName;\n    this.eventName = this.currentEvent.eventName;\n    this.startTime = this.currentEvent.startTime;\n    this.endTime = this.currentEvent.endTime;\n    this.allDay = this.currentEvent.allDay;\n  }\n\n  formatTime(time) {\n    let ftime = formatDate(time, \"medium\", this.locale);\n    return ftime;\n  }\n\n  modify(courseName, eventName, startTime, endTime, allDay) {\n    this.eventService\n      .modifyEvent(\n        this.currentEvent.id,\n        this.courseName,\n        this.setFirstLetterToUppercase(this.eventName),\n        this.startTime,\n        this.endTime,\n        this.allDay\n      )\n      .then(() => {\n        this.collapseCard = true;\n        this.updateDetail();\n        this.presentToast(\"Event Modified Successfully :)\", \"success\");\n      })\n      .catch((error) => {\n        // console.log(\"ERROR: \" + error.message);\n        this.presentToast(\"ERROR :(\", \"danger\");\n      });\n  }\n\n  async remove() {\n    const alert = await this.alertCtrl.create({\n      header: \"Warnning\",\n      message: \"Are you sure to delete this event?\",\n      buttons: [\n        {\n          text: \"Cancel\",\n          role: \"cancel\",\n          cssClass: \"secondary\",\n          handler: (blah) => {\n            console.log(\"Confirm Cancel: blah\");\n          },\n        },\n        {\n          text: \"Okay\",\n          handler: () => {\n            this.presentToast(\"Event Removed Successfully :)\", \"success\");\n            this.eventService.removeEvent(this.currentEvent.id);\n            this.router.navigateByUrl(\"/tabs/tab2\");  \n          },\n        },\n      ],\n    });\n    alert.present();\n  }\n\n  setFirstLetterToUppercase(string: string): string {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n\n  async presentToast(msg, status) {\n    const toast = await this.toastController.create({\n      message: msg,\n      duration: 1000,\n      color: status,\n    });\n    toast.present();\n  }\n}\n"]}